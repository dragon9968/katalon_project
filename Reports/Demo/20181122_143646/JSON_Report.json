{"devicePlatform":"","logFolder":"E:\\WORK\\Katalon_CURA Testproject\\Reports\\Demo\\20181122_143646","runData":{"hostName":"longnguyen - LONGNGUYEN.vodc.lan","os":"Windows 10 64bit","katalonVersion":"5.8.6.1","browser":"Chrome 70.0.3538.102","dbServerInfo":"Microsoft SQL Server 12.00.4100","hostAddress":"10.10.10.62","sessionId":"e4a21096ae5a4cd60dac99a975117429","seleniumVersion":"3.7.1","proxyInformation":"ProxyInformation{proxyOption\u003dNO_PROXY, proxyServerType\u003dHTTP, password\u003d, proxyServerAddress\u003d, proxyServerPort\u003d0}","platform":"Windows 10"},"type":"TEST_SUITE","name":"Demo","id":"Test Suites/Demo","source":"","message":"Test Cases/Demo/DataTable FAILED because (of) (Stack trace: com.kms.katalon.core.exception.StepFailedException: Unable to verify match between actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 (Root cause: Actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 are not matched)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:32)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:56)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.verifyMatch(VerifyMatchKeyword.groovy:61)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.execute(VerifyMatchKeyword.groovy:46)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)\r\n\tat com.kms.katalon.core.keyword.BuiltinKeywords.verifyMatch(BuiltinKeywords.groovy:55)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\r\n\tat groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)\r\n\tat org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:149)\r\n\tat Script1542702721131.run(Script1542702721131.groovy:51)\r\n\tat com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)\r\n\tat com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)\r\n\tat com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)\r\n\tat com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)\r\n\tat TempTestSuite1542872206542.run(TempTestSuite1542872206542.groovy:36)\r\n\tat groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:518)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:507)\r\n\tat groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)\r\n\tat groovy.ui.GroovyMain.run(GroovyMain.java:384)\r\n\tat groovy.ui.GroovyMain.process(GroovyMain.java:370)\r\n\tat groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)\r\n\tat groovy.ui.GroovyMain.main(GroovyMain.java:109)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)\r\n)","description":"","startTime":1542872211965,"endTime":1542872272356,"childRecords":[{"isOptional":false,"type":"TEST_CASE","name":"Test Cases/Demo/DataTable","id":"Test Cases/Demo/DataTable","source":"E:\\\\WORK\\\\Katalon_CURA Testproject\\\\Test Cases\\\\Demo\\\\DataTable.tc","message":"Test Cases/Demo/DataTable FAILED because (of) (Stack trace: com.kms.katalon.core.exception.StepFailedException: Unable to verify match between actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 (Root cause: Actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 are not matched)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:32)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:56)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.verifyMatch(VerifyMatchKeyword.groovy:61)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.execute(VerifyMatchKeyword.groovy:46)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)\r\n\tat com.kms.katalon.core.keyword.BuiltinKeywords.verifyMatch(BuiltinKeywords.groovy:55)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\r\n\tat groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)\r\n\tat org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:149)\r\n\tat Script1542702721131.run(Script1542702721131.groovy:51)\r\n\tat com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)\r\n\tat com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)\r\n\tat com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)\r\n\tat com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)\r\n\tat TempTestSuite1542872206542.run(TempTestSuite1542872206542.groovy:36)\r\n\tat groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:518)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:507)\r\n\tat groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)\r\n\tat groovy.ui.GroovyMain.run(GroovyMain.java:384)\r\n\tat groovy.ui.GroovyMain.process(GroovyMain.java:370)\r\n\tat groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)\r\n\tat groovy.ui.GroovyMain.main(GroovyMain.java:109)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)\r\n)","description":"","startTime":1542872213144,"endTime":1542872272356,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"INFO"},"type":"MESSAGE","name":"","message":"Evaluating variables for test case","startTime":1542872213221,"endTime":0,"childRecords":[],"interuppted":false},{"index":-1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Start listener action : sampleBeforeTestCase","message":"Invoke \u0027com.kms.katalon.core.annotation.BeforeTestCase\u0027 method: \u0027NewTestListener.sampleBeforeTestCase(...)\u0027 completed.","description":"","startTime":1542872213263,"endTime":1542872213411,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(testCaseContext.getTestCaseId())","description":"","startTime":1542872213394,"endTime":1542872213403,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(testCaseContext.getTestCaseVariables())","message":"Invoke \u0027com.kms.katalon.core.annotation.BeforeTestCase\u0027 method: \u0027NewTestListener.sampleBeforeTestCase(...)\u0027 completed.","description":"","startTime":1542872213408,"endTime":1542872213410,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d \u003cnot implemented yet for class: org.codehaus.groovy.ast.expr.EmptyExpression\u003e","description":"","startTime":1542872214266,"endTime":1542872214268,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"openBrowser","message":"Browser is opened with url: \u0027\u0027","description":"","startTime":1542872214279,"endTime":1542872222922,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Browser is opened with url: \u0027\u0027","startTime":1542872222921,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"navigateToUrl","message":"Navigate to \u0027file:/E:/WORK/PassPulFramework/PassPul/PassPul/SeleniumEasy/www.seleniumeasy.com/test/table-data-download-demo.html\u0027 successfully","description":"","startTime":1542872222927,"endTime":1542872224483,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Navigate to \u0027file:/E:/WORK/PassPulFramework/PassPul/PassPul/SeleniumEasy/www.seleniumeasy.com/test/table-data-download-demo.html\u0027 successfully","startTime":1542872224482,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"maximizeWindow","message":"Current window maximized","description":"","startTime":1542872224483,"endTime":1542872225814,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Current window maximized","startTime":1542872225813,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"scrollToPosition","message":"Browser is scrolled to position x \u003d 250, y \u003d 250","description":"","startTime":1542872225828,"endTime":1542872226134,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Browser is scrolled to position x \u003d 250, y \u003d 250","startTime":1542872226132,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - driver \u003d com.kms.katalon.core.webui.driver.DriverFactory.getWebDriver()","description":"","startTime":1542872226135,"endTime":1542872226149,"childRecords":[],"interuppted":false},{"index":7,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - pagination \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\"example_paginate\"]/span/a\"))","description":"","startTime":1542872226151,"endTime":1542872226264,"childRecords":[],"interuppted":false},{"index":8,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - size \u003d pagination.size()","description":"","startTime":1542872226264,"endTime":1542872226266,"childRecords":[],"interuppted":false},{"index":9,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - out.println(pagination.size())","description":"","startTime":1542872226266,"endTime":1542872226280,"childRecords":[],"interuppted":false},{"index":10,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([i \u003d 1, i \u003c\u003d size, (i++)])","description":"","startTime":1542872226280,"endTime":1542872272347,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Try","description":"","startTime":1542872226283,"endTime":1542872250962,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - element \u003d driver.findElement(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example_paginate\u0027]/span/a[\" + i + \"]\")).click()","description":"","startTime":1542872226283,"endTime":1542872226441,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - java.lang.Thread.sleep(2000)","description":"","startTime":1542872226442,"endTime":1542872228453,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_table \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example\u0027]/tbody/tr\"))","description":"","startTime":1542872228455,"endTime":1542872228506,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_count \u003d row_table.size()","description":"","startTime":1542872228507,"endTime":1542872228508,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of rows are : \" + row_count)","description":"","startTime":1542872228509,"endTime":1542872228515,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([row \u003d 0, row \u003c row_count, (row++)])","description":"","startTime":1542872228516,"endTime":1542872250962,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872228519,"endTime":1542872228520,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872228520,"endTime":1542872228524,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872228525,"endTime":1542872228579,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872228579,"endTime":1542872228580,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872228580,"endTime":1542872228582,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$162,700\u0027 and expected text \u0027$1,200,000\u0027 (Root cause: Actual text \u0027$162,700\u0027 and expected text \u0027$1,200,000\u0027 are not matched)","description":"","startTime":1542872228583,"endTime":1542872233393,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872228583,"endTime":1542872228630,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872228633,"endTime":1542872228634,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 (Root cause: Actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 are not matched)","description":"","startTime":1542872228634,"endTime":1542872230542,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 (Root cause: Actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 are not matched)","startTime":1542872230537,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872230543,"endTime":1542872230934,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872230935,"endTime":1542872230935,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Accountant\u0027 and expected text \u0027Chief Executive Officer (CEO)\u0027 (Root cause: Actual text \u0027Accountant\u0027 and expected text \u0027Chief Executive Officer (CEO)\u0027 are not matched)","description":"","startTime":1542872230936,"endTime":1542872231346,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Accountant\u0027 and expected text \u0027Chief Executive Officer (CEO)\u0027 (Root cause: Actual text \u0027Accountant\u0027 and expected text \u0027Chief Executive Officer (CEO)\u0027 are not matched)","startTime":1542872231346,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872231346,"endTime":1542872231513,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872231514,"endTime":1542872231514,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Tokyo\u0027 and expected text \u0027London\u0027 (Root cause: Actual text \u0027Tokyo\u0027 and expected text \u0027London\u0027 are not matched)","description":"","startTime":1542872231515,"endTime":1542872232004,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Tokyo\u0027 and expected text \u0027London\u0027 (Root cause: Actual text \u0027Tokyo\u0027 and expected text \u0027London\u0027 are not matched)","startTime":1542872232003,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872232004,"endTime":1542872232191,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872232191,"endTime":1542872232192,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002733\u0027 and expected text \u002747\u0027 (Root cause: Actual text \u002733\u0027 and expected text \u002747\u0027 are not matched)","description":"","startTime":1542872232193,"endTime":1542872232586,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002733\u0027 and expected text \u002747\u0027 (Root cause: Actual text \u002733\u0027 and expected text \u002747\u0027 are not matched)","startTime":1542872232586,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872232587,"endTime":1542872232782,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872232783,"endTime":1542872232783,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272008/11/28\u0027 and expected text \u00272009/10/09\u0027 (Root cause: Actual text \u00272008/11/28\u0027 and expected text \u00272009/10/09\u0027 are not matched)","description":"","startTime":1542872232784,"endTime":1542872232896,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272008/11/28\u0027 and expected text \u00272009/10/09\u0027 (Root cause: Actual text \u00272008/11/28\u0027 and expected text \u00272009/10/09\u0027 are not matched)","startTime":1542872232896,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872232897,"endTime":1542872233141,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872233141,"endTime":1542872233142,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$162,700\u0027 and expected text \u0027$1,200,000\u0027 (Root cause: Actual text \u0027$162,700\u0027 and expected text \u0027$1,200,000\u0027 are not matched)","description":"","startTime":1542872233142,"endTime":1542872233393,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$162,700\u0027 and expected text \u0027$1,200,000\u0027 (Root cause: Actual text \u0027$162,700\u0027 and expected text \u0027$1,200,000\u0027 are not matched)","startTime":1542872233393,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872233394,"endTime":1542872233394,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872233394,"endTime":1542872233395,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872233395,"endTime":1542872233424,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872233425,"endTime":1542872233426,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872233426,"endTime":1542872233427,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$1,200,000\u0027 and expected text \u0027$132,000\u0027 (Root cause: Actual text \u0027$1,200,000\u0027 and expected text \u0027$132,000\u0027 are not matched)","description":"","startTime":1542872233427,"endTime":1542872235824,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872233427,"endTime":1542872234034,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872234034,"endTime":1542872234035,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Angelica Ramos\u0027 and expected text \u0027Bradley Greer\u0027 (Root cause: Actual text \u0027Angelica Ramos\u0027 and expected text \u0027Bradley Greer\u0027 are not matched)","description":"","startTime":1542872234035,"endTime":1542872234185,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Angelica Ramos\u0027 and expected text \u0027Bradley Greer\u0027 (Root cause: Actual text \u0027Angelica Ramos\u0027 and expected text \u0027Bradley Greer\u0027 are not matched)","startTime":1542872234185,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872234185,"endTime":1542872234218,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872234218,"endTime":1542872234219,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Chief Executive Officer (CEO)\u0027 and expected text \u0027Software Engineer\u0027 (Root cause: Actual text \u0027Chief Executive Officer (CEO)\u0027 and expected text \u0027Software Engineer\u0027 are not matched)","description":"","startTime":1542872234219,"endTime":1542872234505,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Chief Executive Officer (CEO)\u0027 and expected text \u0027Software Engineer\u0027 (Root cause: Actual text \u0027Chief Executive Officer (CEO)\u0027 and expected text \u0027Software Engineer\u0027 are not matched)","startTime":1542872234503,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872234505,"endTime":1542872234544,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872234545,"endTime":1542872234546,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","description":"","startTime":1542872234546,"endTime":1542872234743,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","startTime":1542872234743,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872234744,"endTime":1542872234776,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872234776,"endTime":1542872234777,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002747\u0027 and expected text \u002741\u0027 (Root cause: Actual text \u002747\u0027 and expected text \u002741\u0027 are not matched)","description":"","startTime":1542872234777,"endTime":1542872234807,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002747\u0027 and expected text \u002741\u0027 (Root cause: Actual text \u002747\u0027 and expected text \u002741\u0027 are not matched)","startTime":1542872234806,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872234807,"endTime":1542872234982,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872234982,"endTime":1542872234984,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272009/10/09\u0027 and expected text \u00272012/10/13\u0027 (Root cause: Actual text \u00272009/10/09\u0027 and expected text \u00272012/10/13\u0027 are not matched)","description":"","startTime":1542872234985,"endTime":1542872235341,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272009/10/09\u0027 and expected text \u00272012/10/13\u0027 (Root cause: Actual text \u00272009/10/09\u0027 and expected text \u00272012/10/13\u0027 are not matched)","startTime":1542872235340,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872235341,"endTime":1542872235602,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872235602,"endTime":1542872235603,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$1,200,000\u0027 and expected text \u0027$132,000\u0027 (Root cause: Actual text \u0027$1,200,000\u0027 and expected text \u0027$132,000\u0027 are not matched)","description":"","startTime":1542872235603,"endTime":1542872235815,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$1,200,000\u0027 and expected text \u0027$132,000\u0027 (Root cause: Actual text \u0027$1,200,000\u0027 and expected text \u0027$132,000\u0027 are not matched)","startTime":1542872235815,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872235825,"endTime":1542872235825,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872235826,"endTime":1542872235826,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872235827,"endTime":1542872235852,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872235852,"endTime":1542872235852,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872235853,"endTime":1542872235853,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$86,000\u0027 and expected text \u0027$372,000\u0027 (Root cause: Actual text \u0027$86,000\u0027 and expected text \u0027$372,000\u0027 are not matched)","description":"","startTime":1542872235854,"endTime":1542872238806,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872235856,"endTime":1542872235949,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872235949,"endTime":1542872235951,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Ashton Cox\u0027 and expected text \u0027Brielle Williamson\u0027 (Root cause: Actual text \u0027Ashton Cox\u0027 and expected text \u0027Brielle Williamson\u0027 are not matched)","description":"","startTime":1542872235951,"endTime":1542872236078,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Ashton Cox\u0027 and expected text \u0027Brielle Williamson\u0027 (Root cause: Actual text \u0027Ashton Cox\u0027 and expected text \u0027Brielle Williamson\u0027 are not matched)","startTime":1542872236077,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872236078,"endTime":1542872236109,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872236109,"endTime":1542872236110,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Junior Technical Author\u0027 and expected text \u0027Integration Specialist\u0027 (Root cause: Actual text \u0027Junior Technical Author\u0027 and expected text \u0027Integration Specialist\u0027 are not matched)","description":"","startTime":1542872236110,"endTime":1542872236939,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Junior Technical Author\u0027 and expected text \u0027Integration Specialist\u0027 (Root cause: Actual text \u0027Junior Technical Author\u0027 and expected text \u0027Integration Specialist\u0027 are not matched)","startTime":1542872236939,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872236939,"endTime":1542872237070,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872237070,"endTime":1542872237072,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 are not matched)","description":"","startTime":1542872237072,"endTime":1542872238239,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 are not matched)","startTime":1542872238238,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872238239,"endTime":1542872238381,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872238381,"endTime":1542872238382,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002766\u0027 and expected text \u002761\u0027 (Root cause: Actual text \u002766\u0027 and expected text \u002761\u0027 are not matched)","description":"","startTime":1542872238382,"endTime":1542872238535,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002766\u0027 and expected text \u002761\u0027 (Root cause: Actual text \u002766\u0027 and expected text \u002761\u0027 are not matched)","startTime":1542872238534,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872238535,"endTime":1542872238568,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872238569,"endTime":1542872238569,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272009/01/12\u0027 and expected text \u00272012/12/02\u0027 (Root cause: Actual text \u00272009/01/12\u0027 and expected text \u00272012/12/02\u0027 are not matched)","description":"","startTime":1542872238570,"endTime":1542872238604,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272009/01/12\u0027 and expected text \u00272012/12/02\u0027 (Root cause: Actual text \u00272009/01/12\u0027 and expected text \u00272012/12/02\u0027 are not matched)","startTime":1542872238603,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872238605,"endTime":1542872238775,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872238775,"endTime":1542872238776,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$86,000\u0027 and expected text \u0027$372,000\u0027 (Root cause: Actual text \u0027$86,000\u0027 and expected text \u0027$372,000\u0027 are not matched)","description":"","startTime":1542872238776,"endTime":1542872238806,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$86,000\u0027 and expected text \u0027$372,000\u0027 (Root cause: Actual text \u0027$86,000\u0027 and expected text \u0027$372,000\u0027 are not matched)","startTime":1542872238806,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872238806,"endTime":1542872238807,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872238807,"endTime":1542872238807,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872238807,"endTime":1542872238832,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872238832,"endTime":1542872238833,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872238833,"endTime":1542872238834,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$132,000\u0027 and expected text \u0027$433,060\u0027 (Root cause: Actual text \u0027$132,000\u0027 and expected text \u0027$433,060\u0027 are not matched)","description":"","startTime":1542872238834,"endTime":1542872239905,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872238834,"endTime":1542872238867,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872238867,"endTime":1542872238867,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Bradley Greer\u0027 and expected text \u0027Cedric Kelly\u0027 (Root cause: Actual text \u0027Bradley Greer\u0027 and expected text \u0027Cedric Kelly\u0027 are not matched)","description":"","startTime":1542872238868,"endTime":1542872239051,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Bradley Greer\u0027 and expected text \u0027Cedric Kelly\u0027 (Root cause: Actual text \u0027Bradley Greer\u0027 and expected text \u0027Cedric Kelly\u0027 are not matched)","startTime":1542872239051,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872239052,"endTime":1542872239080,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872239080,"endTime":1542872239081,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Software Engineer\u0027 and expected text \u0027Senior Javascript Developer\u0027 (Root cause: Actual text \u0027Software Engineer\u0027 and expected text \u0027Senior Javascript Developer\u0027 are not matched)","description":"","startTime":1542872239081,"endTime":1542872239107,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Software Engineer\u0027 and expected text \u0027Senior Javascript Developer\u0027 (Root cause: Actual text \u0027Software Engineer\u0027 and expected text \u0027Senior Javascript Developer\u0027 are not matched)","startTime":1542872239106,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872239107,"endTime":1542872239252,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872239253,"endTime":1542872239253,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027London\u0027 and expected text \u0027Edinburgh\u0027 (Root cause: Actual text \u0027London\u0027 and expected text \u0027Edinburgh\u0027 are not matched)","description":"","startTime":1542872239254,"endTime":1542872239373,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027London\u0027 and expected text \u0027Edinburgh\u0027 (Root cause: Actual text \u0027London\u0027 and expected text \u0027Edinburgh\u0027 are not matched)","startTime":1542872239372,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872239373,"endTime":1542872239505,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872239505,"endTime":1542872239506,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002741\u0027 and expected text \u002722\u0027 (Root cause: Actual text \u002741\u0027 and expected text \u002722\u0027 are not matched)","description":"","startTime":1542872239506,"endTime":1542872239594,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002741\u0027 and expected text \u002722\u0027 (Root cause: Actual text \u002741\u0027 and expected text \u002722\u0027 are not matched)","startTime":1542872239594,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872239595,"endTime":1542872239627,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872239627,"endTime":1542872239629,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272012/10/13\u0027 and expected text \u00272012/03/29\u0027 (Root cause: Actual text \u00272012/10/13\u0027 and expected text \u00272012/03/29\u0027 are not matched)","description":"","startTime":1542872239629,"endTime":1542872239829,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272012/10/13\u0027 and expected text \u00272012/03/29\u0027 (Root cause: Actual text \u00272012/10/13\u0027 and expected text \u00272012/03/29\u0027 are not matched)","startTime":1542872239828,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872239829,"endTime":1542872239860,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872239861,"endTime":1542872239861,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$132,000\u0027 and expected text \u0027$433,060\u0027 (Root cause: Actual text \u0027$132,000\u0027 and expected text \u0027$433,060\u0027 are not matched)","description":"","startTime":1542872239862,"endTime":1542872239905,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$132,000\u0027 and expected text \u0027$433,060\u0027 (Root cause: Actual text \u0027$132,000\u0027 and expected text \u0027$433,060\u0027 are not matched)","startTime":1542872239904,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872239905,"endTime":1542872239905,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872239906,"endTime":1542872239906,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872239906,"endTime":1542872240086,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872240086,"endTime":1542872240086,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872240087,"endTime":1542872240087,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$206,850\u0027 and expected text \u0027$205,500\u0027 (Root cause: Actual text \u0027$206,850\u0027 and expected text \u0027$205,500\u0027 are not matched)","description":"","startTime":1542872240087,"endTime":1542872241169,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872240088,"endTime":1542872240118,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872240118,"endTime":1542872240119,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Brenden Wagner\u0027 and expected text \u0027Colleen Hurst\u0027 (Root cause: Actual text \u0027Brenden Wagner\u0027 and expected text \u0027Colleen Hurst\u0027 are not matched)","description":"","startTime":1542872240119,"endTime":1542872240330,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Brenden Wagner\u0027 and expected text \u0027Colleen Hurst\u0027 (Root cause: Actual text \u0027Brenden Wagner\u0027 and expected text \u0027Colleen Hurst\u0027 are not matched)","startTime":1542872240329,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872240330,"endTime":1542872240382,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872240383,"endTime":1542872240383,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Software Engineer\u0027 and expected text \u0027Javascript Developer\u0027 (Root cause: Actual text \u0027Software Engineer\u0027 and expected text \u0027Javascript Developer\u0027 are not matched)","description":"","startTime":1542872240383,"endTime":1542872240578,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Software Engineer\u0027 and expected text \u0027Javascript Developer\u0027 (Root cause: Actual text \u0027Software Engineer\u0027 and expected text \u0027Javascript Developer\u0027 are not matched)","startTime":1542872240578,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872240579,"endTime":1542872240616,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872240617,"endTime":1542872240617,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"","startTime":1542872240617,"endTime":1542872240646,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1542872240646,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872240647,"endTime":1542872240794,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872240795,"endTime":1542872240795,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002728\u0027 and expected text \u002739\u0027 (Root cause: Actual text \u002728\u0027 and expected text \u002739\u0027 are not matched)","description":"","startTime":1542872240796,"endTime":1542872240859,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002728\u0027 and expected text \u002739\u0027 (Root cause: Actual text \u002728\u0027 and expected text \u002739\u0027 are not matched)","startTime":1542872240858,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872240859,"endTime":1542872240890,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872240891,"endTime":1542872240891,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272011/06/07\u0027 and expected text \u00272009/09/15\u0027 (Root cause: Actual text \u00272011/06/07\u0027 and expected text \u00272009/09/15\u0027 are not matched)","description":"","startTime":1542872240891,"endTime":1542872240917,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272011/06/07\u0027 and expected text \u00272009/09/15\u0027 (Root cause: Actual text \u00272011/06/07\u0027 and expected text \u00272009/09/15\u0027 are not matched)","startTime":1542872240917,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872240918,"endTime":1542872241101,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872241101,"endTime":1542872241102,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$206,850\u0027 and expected text \u0027$205,500\u0027 (Root cause: Actual text \u0027$206,850\u0027 and expected text \u0027$205,500\u0027 are not matched)","description":"","startTime":1542872241102,"endTime":1542872241169,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$206,850\u0027 and expected text \u0027$205,500\u0027 (Root cause: Actual text \u0027$206,850\u0027 and expected text \u0027$205,500\u0027 are not matched)","startTime":1542872241168,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872241169,"endTime":1542872241170,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872241170,"endTime":1542872241171,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872241172,"endTime":1542872241312,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872241313,"endTime":1542872241313,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872241313,"endTime":1542872241313,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$372,000\u0027 and expected text \u0027$85,600\u0027 (Root cause: Actual text \u0027$372,000\u0027 and expected text \u0027$85,600\u0027 are not matched)","description":"","startTime":1542872241314,"endTime":1542872242728,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872241314,"endTime":1542872241385,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872241385,"endTime":1542872241386,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Brielle Williamson\u0027 and expected text \u0027Doris Wilder\u0027 (Root cause: Actual text \u0027Brielle Williamson\u0027 and expected text \u0027Doris Wilder\u0027 are not matched)","description":"","startTime":1542872241386,"endTime":1542872241415,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Brielle Williamson\u0027 and expected text \u0027Doris Wilder\u0027 (Root cause: Actual text \u0027Brielle Williamson\u0027 and expected text \u0027Doris Wilder\u0027 are not matched)","startTime":1542872241414,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872241415,"endTime":1542872241623,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872241623,"endTime":1542872241623,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Integration Specialist\u0027 and expected text \u0027Sales Assistant\u0027 (Root cause: Actual text \u0027Integration Specialist\u0027 and expected text \u0027Sales Assistant\u0027 are not matched)","description":"","startTime":1542872241623,"endTime":1542872241656,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Integration Specialist\u0027 and expected text \u0027Sales Assistant\u0027 (Root cause: Actual text \u0027Integration Specialist\u0027 and expected text \u0027Sales Assistant\u0027 are not matched)","startTime":1542872241656,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872241656,"endTime":1542872241694,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872241694,"endTime":1542872241695,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027New York\u0027 and expected text \u0027Sidney\u0027 (Root cause: Actual text \u0027New York\u0027 and expected text \u0027Sidney\u0027 are not matched)","description":"","startTime":1542872241695,"endTime":1542872241877,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027New York\u0027 and expected text \u0027Sidney\u0027 (Root cause: Actual text \u0027New York\u0027 and expected text \u0027Sidney\u0027 are not matched)","startTime":1542872241877,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872241877,"endTime":1542872241950,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872241950,"endTime":1542872241950,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002761\u0027 and expected text \u002723\u0027 (Root cause: Actual text \u002761\u0027 and expected text \u002723\u0027 are not matched)","description":"","startTime":1542872241951,"endTime":1542872242141,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002761\u0027 and expected text \u002723\u0027 (Root cause: Actual text \u002761\u0027 and expected text \u002723\u0027 are not matched)","startTime":1542872242141,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872242141,"endTime":1542872242424,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872242424,"endTime":1542872242425,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272012/12/02\u0027 and expected text \u00272010/09/20\u0027 (Root cause: Actual text \u00272012/12/02\u0027 and expected text \u00272010/09/20\u0027 are not matched)","description":"","startTime":1542872242425,"endTime":1542872242479,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272012/12/02\u0027 and expected text \u00272010/09/20\u0027 (Root cause: Actual text \u00272012/12/02\u0027 and expected text \u00272010/09/20\u0027 are not matched)","startTime":1542872242479,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872242479,"endTime":1542872242505,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872242505,"endTime":1542872242505,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$372,000\u0027 and expected text \u0027$85,600\u0027 (Root cause: Actual text \u0027$372,000\u0027 and expected text \u0027$85,600\u0027 are not matched)","description":"","startTime":1542872242506,"endTime":1542872242728,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$372,000\u0027 and expected text \u0027$85,600\u0027 (Root cause: Actual text \u0027$372,000\u0027 and expected text \u0027$85,600\u0027 are not matched)","startTime":1542872242728,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872242729,"endTime":1542872242729,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872242729,"endTime":1542872242729,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872242729,"endTime":1542872242816,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872242817,"endTime":1542872242817,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872242817,"endTime":1542872242817,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$106,450\u0027 and expected text \u0027$170,750\u0027 (Root cause: Actual text \u0027$106,450\u0027 and expected text \u0027$170,750\u0027 are not matched)","description":"","startTime":1542872242818,"endTime":1542872245275,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872242818,"endTime":1542872242970,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872242970,"endTime":1542872242971,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Caesar Vance\u0027 and expected text \u0027Garrett Winters\u0027 (Root cause: Actual text \u0027Caesar Vance\u0027 and expected text \u0027Garrett Winters\u0027 are not matched)","description":"","startTime":1542872242971,"endTime":1542872243247,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Caesar Vance\u0027 and expected text \u0027Garrett Winters\u0027 (Root cause: Actual text \u0027Caesar Vance\u0027 and expected text \u0027Garrett Winters\u0027 are not matched)","startTime":1542872243247,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872243248,"endTime":1542872243411,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872243411,"endTime":1542872243412,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Pre-Sales Support\u0027 and expected text \u0027Accountant\u0027 (Root cause: Actual text \u0027Pre-Sales Support\u0027 and expected text \u0027Accountant\u0027 are not matched)","description":"","startTime":1542872243412,"endTime":1542872243978,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Pre-Sales Support\u0027 and expected text \u0027Accountant\u0027 (Root cause: Actual text \u0027Pre-Sales Support\u0027 and expected text \u0027Accountant\u0027 are not matched)","startTime":1542872243978,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872243978,"endTime":1542872244035,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872244035,"endTime":1542872244036,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027New York\u0027 and expected text \u0027Tokyo\u0027 (Root cause: Actual text \u0027New York\u0027 and expected text \u0027Tokyo\u0027 are not matched)","description":"","startTime":1542872244036,"endTime":1542872244493,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027New York\u0027 and expected text \u0027Tokyo\u0027 (Root cause: Actual text \u0027New York\u0027 and expected text \u0027Tokyo\u0027 are not matched)","startTime":1542872244493,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872244493,"endTime":1542872244533,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872244534,"endTime":1542872244534,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002721\u0027 and expected text \u002763\u0027 (Root cause: Actual text \u002721\u0027 and expected text \u002763\u0027 are not matched)","description":"","startTime":1542872244534,"endTime":1542872244818,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002721\u0027 and expected text \u002763\u0027 (Root cause: Actual text \u002721\u0027 and expected text \u002763\u0027 are not matched)","startTime":1542872244817,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872244818,"endTime":1542872244994,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872244995,"endTime":1542872244995,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272011/12/12\u0027 and expected text \u00272011/07/25\u0027 (Root cause: Actual text \u00272011/12/12\u0027 and expected text \u00272011/07/25\u0027 are not matched)","description":"","startTime":1542872244996,"endTime":1542872245053,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272011/12/12\u0027 and expected text \u00272011/07/25\u0027 (Root cause: Actual text \u00272011/12/12\u0027 and expected text \u00272011/07/25\u0027 are not matched)","startTime":1542872245053,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872245054,"endTime":1542872245169,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872245169,"endTime":1542872245170,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$106,450\u0027 and expected text \u0027$170,750\u0027 (Root cause: Actual text \u0027$106,450\u0027 and expected text \u0027$170,750\u0027 are not matched)","description":"","startTime":1542872245170,"endTime":1542872245275,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$106,450\u0027 and expected text \u0027$170,750\u0027 (Root cause: Actual text \u0027$106,450\u0027 and expected text \u0027$170,750\u0027 are not matched)","startTime":1542872245275,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872245276,"endTime":1542872245276,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872245276,"endTime":1542872245276,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872245276,"endTime":1542872245300,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872245300,"endTime":1542872245300,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872245300,"endTime":1542872245301,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$433,060\u0027 and expected text \u0027$237,500\u0027 (Root cause: Actual text \u0027$433,060\u0027 and expected text \u0027$237,500\u0027 are not matched)","description":"","startTime":1542872245301,"endTime":1542872247295,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872245301,"endTime":1542872245333,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872245333,"endTime":1542872245334,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Cedric Kelly\u0027 and expected text \u0027Gloria Little\u0027 (Root cause: Actual text \u0027Cedric Kelly\u0027 and expected text \u0027Gloria Little\u0027 are not matched)","description":"","startTime":1542872245334,"endTime":1542872245531,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Cedric Kelly\u0027 and expected text \u0027Gloria Little\u0027 (Root cause: Actual text \u0027Cedric Kelly\u0027 and expected text \u0027Gloria Little\u0027 are not matched)","startTime":1542872245531,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872245531,"endTime":1542872246479,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872246479,"endTime":1542872246480,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Senior Javascript Developer\u0027 and expected text \u0027Systems Administrator\u0027 (Root cause: Actual text \u0027Senior Javascript Developer\u0027 and expected text \u0027Systems Administrator\u0027 are not matched)","description":"","startTime":1542872246480,"endTime":1542872246670,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Senior Javascript Developer\u0027 and expected text \u0027Systems Administrator\u0027 (Root cause: Actual text \u0027Senior Javascript Developer\u0027 and expected text \u0027Systems Administrator\u0027 are not matched)","startTime":1542872246670,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872246670,"endTime":1542872246703,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872246704,"endTime":1542872246704,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Edinburgh\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027Edinburgh\u0027 and expected text \u0027New York\u0027 are not matched)","description":"","startTime":1542872246704,"endTime":1542872246741,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Edinburgh\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027Edinburgh\u0027 and expected text \u0027New York\u0027 are not matched)","startTime":1542872246741,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872246741,"endTime":1542872246899,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872246899,"endTime":1542872246900,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002722\u0027 and expected text \u002759\u0027 (Root cause: Actual text \u002722\u0027 and expected text \u002759\u0027 are not matched)","description":"","startTime":1542872246901,"endTime":1542872246937,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002722\u0027 and expected text \u002759\u0027 (Root cause: Actual text \u002722\u0027 and expected text \u002759\u0027 are not matched)","startTime":1542872246937,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872246937,"endTime":1542872246969,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872246969,"endTime":1542872246970,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272012/03/29\u0027 and expected text \u00272009/04/10\u0027 (Root cause: Actual text \u00272012/03/29\u0027 and expected text \u00272009/04/10\u0027 are not matched)","description":"","startTime":1542872246970,"endTime":1542872247218,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272012/03/29\u0027 and expected text \u00272009/04/10\u0027 (Root cause: Actual text \u00272012/03/29\u0027 and expected text \u00272009/04/10\u0027 are not matched)","startTime":1542872247218,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872247218,"endTime":1542872247266,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872247266,"endTime":1542872247266,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$433,060\u0027 and expected text \u0027$237,500\u0027 (Root cause: Actual text \u0027$433,060\u0027 and expected text \u0027$237,500\u0027 are not matched)","description":"","startTime":1542872247267,"endTime":1542872247295,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$433,060\u0027 and expected text \u0027$237,500\u0027 (Root cause: Actual text \u0027$433,060\u0027 and expected text \u0027$237,500\u0027 are not matched)","startTime":1542872247295,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872247295,"endTime":1542872247296,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872247296,"endTime":1542872247296,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872247296,"endTime":1542872247663,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872247664,"endTime":1542872247664,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872247664,"endTime":1542872247664,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$470,600\u0027 and expected text \u0027$137,500\u0027 (Root cause: Actual text \u0027$470,600\u0027 and expected text \u0027$137,500\u0027 are not matched)","description":"","startTime":1542872247665,"endTime":1542872249622,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872247665,"endTime":1542872247846,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872247846,"endTime":1542872247846,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Charde Marshall\u0027 and expected text \u0027Herrod Chandler\u0027 (Root cause: Actual text \u0027Charde Marshall\u0027 and expected text \u0027Herrod Chandler\u0027 are not matched)","description":"","startTime":1542872247847,"endTime":1542872247878,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Charde Marshall\u0027 and expected text \u0027Herrod Chandler\u0027 (Root cause: Actual text \u0027Charde Marshall\u0027 and expected text \u0027Herrod Chandler\u0027 are not matched)","startTime":1542872247878,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872247878,"endTime":1542872248059,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872248060,"endTime":1542872248060,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Regional Director\u0027 and expected text \u0027Sales Assistant\u0027 (Root cause: Actual text \u0027Regional Director\u0027 and expected text \u0027Sales Assistant\u0027 are not matched)","description":"","startTime":1542872248060,"endTime":1542872248332,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Regional Director\u0027 and expected text \u0027Sales Assistant\u0027 (Root cause: Actual text \u0027Regional Director\u0027 and expected text \u0027Sales Assistant\u0027 are not matched)","startTime":1542872248332,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872248332,"endTime":1542872248362,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872248362,"endTime":1542872248363,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"","startTime":1542872248363,"endTime":1542872248606,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1542872248606,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872248606,"endTime":1542872248641,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872248641,"endTime":1542872248642,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002736\u0027 and expected text \u002759\u0027 (Root cause: Actual text \u002736\u0027 and expected text \u002759\u0027 are not matched)","description":"","startTime":1542872248642,"endTime":1542872249117,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002736\u0027 and expected text \u002759\u0027 (Root cause: Actual text \u002736\u0027 and expected text \u002759\u0027 are not matched)","startTime":1542872249117,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872249117,"endTime":1542872249243,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872249243,"endTime":1542872249244,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272008/10/16\u0027 and expected text \u00272012/08/06\u0027 (Root cause: Actual text \u00272008/10/16\u0027 and expected text \u00272012/08/06\u0027 are not matched)","description":"","startTime":1542872249244,"endTime":1542872249402,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272008/10/16\u0027 and expected text \u00272012/08/06\u0027 (Root cause: Actual text \u00272008/10/16\u0027 and expected text \u00272012/08/06\u0027 are not matched)","startTime":1542872249401,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872249402,"endTime":1542872249544,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872249544,"endTime":1542872249544,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$470,600\u0027 and expected text \u0027$137,500\u0027 (Root cause: Actual text \u0027$470,600\u0027 and expected text \u0027$137,500\u0027 are not matched)","description":"","startTime":1542872249545,"endTime":1542872249622,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$470,600\u0027 and expected text \u0027$137,500\u0027 (Root cause: Actual text \u0027$470,600\u0027 and expected text \u0027$137,500\u0027 are not matched)","startTime":1542872249621,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872249622,"endTime":1542872249622,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872249622,"endTime":1542872249623,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872249623,"endTime":1542872249651,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872249651,"endTime":1542872249652,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872249652,"endTime":1542872249652,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$205,500\u0027 and expected text \u0027$345,000\u0027 (Root cause: Actual text \u0027$205,500\u0027 and expected text \u0027$345,000\u0027 are not matched)","description":"","startTime":1542872249652,"endTime":1542872250961,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872249653,"endTime":1542872249686,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872249686,"endTime":1542872249687,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Colleen Hurst\u0027 and expected text \u0027Jenette Caldwell\u0027 (Root cause: Actual text \u0027Colleen Hurst\u0027 and expected text \u0027Jenette Caldwell\u0027 are not matched)","description":"","startTime":1542872249687,"endTime":1542872249952,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Colleen Hurst\u0027 and expected text \u0027Jenette Caldwell\u0027 (Root cause: Actual text \u0027Colleen Hurst\u0027 and expected text \u0027Jenette Caldwell\u0027 are not matched)","startTime":1542872249951,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872249952,"endTime":1542872250034,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872250034,"endTime":1542872250035,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Javascript Developer\u0027 and expected text \u0027Development Lead\u0027 (Root cause: Actual text \u0027Javascript Developer\u0027 and expected text \u0027Development Lead\u0027 are not matched)","description":"","startTime":1542872250035,"endTime":1542872250185,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Javascript Developer\u0027 and expected text \u0027Development Lead\u0027 (Root cause: Actual text \u0027Javascript Developer\u0027 and expected text \u0027Development Lead\u0027 are not matched)","startTime":1542872250185,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872250185,"endTime":1542872250258,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872250258,"endTime":1542872250259,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 are not matched)","description":"","startTime":1542872250260,"endTime":1542872250416,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027San Francisco\u0027 and expected text \u0027New York\u0027 are not matched)","startTime":1542872250416,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872250416,"endTime":1542872250447,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872250448,"endTime":1542872250449,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002739\u0027 and expected text \u002730\u0027 (Root cause: Actual text \u002739\u0027 and expected text \u002730\u0027 are not matched)","description":"","startTime":1542872250449,"endTime":1542872250679,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002739\u0027 and expected text \u002730\u0027 (Root cause: Actual text \u002739\u0027 and expected text \u002730\u0027 are not matched)","startTime":1542872250678,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872250679,"endTime":1542872250704,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872250705,"endTime":1542872250706,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272009/09/15\u0027 and expected text \u00272011/09/03\u0027 (Root cause: Actual text \u00272009/09/15\u0027 and expected text \u00272011/09/03\u0027 are not matched)","description":"","startTime":1542872250706,"endTime":1542872250731,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272009/09/15\u0027 and expected text \u00272011/09/03\u0027 (Root cause: Actual text \u00272009/09/15\u0027 and expected text \u00272011/09/03\u0027 are not matched)","startTime":1542872250731,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872250731,"endTime":1542872250837,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872250837,"endTime":1542872250838,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$205,500\u0027 and expected text \u0027$345,000\u0027 (Root cause: Actual text \u0027$205,500\u0027 and expected text \u0027$345,000\u0027 are not matched)","description":"","startTime":1542872250838,"endTime":1542872250961,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$205,500\u0027 and expected text \u0027$345,000\u0027 (Root cause: Actual text \u0027$205,500\u0027 and expected text \u0027$345,000\u0027 are not matched)","startTime":1542872250961,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Try","message":"Reading database data with query \u0027SELECT Name,Position,Office,Age,convert(varchar, StartDate, 111)as StartDate,\u0027$\u0027 + replace(CONVERT(VARCHAR(100),CAST(Salary AS MONEY),1), \u0027.00\u0027,\u0027\u0027) from Data_Table\u0027","description":"","startTime":1542872250962,"endTime":1542872272330,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - element \u003d driver.findElement(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example_paginate\u0027]/span/a[\" + i + \"]\")).click()","description":"","startTime":1542872250962,"endTime":1542872251514,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - java.lang.Thread.sleep(2000)","description":"","startTime":1542872251514,"endTime":1542872253522,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_table \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example\u0027]/tbody/tr\"))","description":"","startTime":1542872253522,"endTime":1542872253997,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_count \u003d row_table.size()","description":"","startTime":1542872253998,"endTime":1542872253998,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of rows are : \" + row_count)","description":"","startTime":1542872253998,"endTime":1542872253998,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([row \u003d 0, row \u003c row_count, (row++)])","message":"Reading database data with query \u0027SELECT Name,Position,Office,Age,convert(varchar, StartDate, 111)as StartDate,\u0027$\u0027 + replace(CONVERT(VARCHAR(100),CAST(Salary AS MONEY),1), \u0027.00\u0027,\u0027\u0027) from Data_Table\u0027","description":"","startTime":1542872253998,"endTime":1542872272330,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872253999,"endTime":1542872253999,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872253999,"endTime":1542872253999,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872253999,"endTime":1542872254134,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872254134,"endTime":1542872254134,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872254134,"endTime":1542872254135,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$217,500\u0027 and expected text \u0027$198,500\u0027 (Root cause: Actual text \u0027$217,500\u0027 and expected text \u0027$198,500\u0027 are not matched)","description":"","startTime":1542872254135,"endTime":1542872257502,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872254135,"endTime":1542872254389,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872254389,"endTime":1542872254390,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Dai Rios\u0027 and expected text \u0027Michael Silva\u0027 (Root cause: Actual text \u0027Dai Rios\u0027 and expected text \u0027Michael Silva\u0027 are not matched)","description":"","startTime":1542872254390,"endTime":1542872254601,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Dai Rios\u0027 and expected text \u0027Michael Silva\u0027 (Root cause: Actual text \u0027Dai Rios\u0027 and expected text \u0027Michael Silva\u0027 are not matched)","startTime":1542872254601,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872254605,"endTime":1542872254645,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872254645,"endTime":1542872254646,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Personnel Lead\u0027 and expected text \u0027Marketing Designer\u0027 (Root cause: Actual text \u0027Personnel Lead\u0027 and expected text \u0027Marketing Designer\u0027 are not matched)","description":"","startTime":1542872254646,"endTime":1542872254738,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Personnel Lead\u0027 and expected text \u0027Marketing Designer\u0027 (Root cause: Actual text \u0027Personnel Lead\u0027 and expected text \u0027Marketing Designer\u0027 are not matched)","startTime":1542872254738,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872254738,"endTime":1542872255103,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872255103,"endTime":1542872255104,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Edinburgh\u0027 and expected text \u0027London\u0027 (Root cause: Actual text \u0027Edinburgh\u0027 and expected text \u0027London\u0027 are not matched)","description":"","startTime":1542872255104,"endTime":1542872255407,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Edinburgh\u0027 and expected text \u0027London\u0027 (Root cause: Actual text \u0027Edinburgh\u0027 and expected text \u0027London\u0027 are not matched)","startTime":1542872255407,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872255407,"endTime":1542872255502,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872255502,"endTime":1542872255503,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002735\u0027 and expected text \u002766\u0027 (Root cause: Actual text \u002735\u0027 and expected text \u002766\u0027 are not matched)","description":"","startTime":1542872255503,"endTime":1542872256183,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002735\u0027 and expected text \u002766\u0027 (Root cause: Actual text \u002735\u0027 and expected text \u002766\u0027 are not matched)","startTime":1542872256183,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872256183,"endTime":1542872256266,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872256266,"endTime":1542872256267,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272012/09/26\u0027 and expected text \u00272012/11/27\u0027 (Root cause: Actual text \u00272012/09/26\u0027 and expected text \u00272012/11/27\u0027 are not matched)","description":"","startTime":1542872256267,"endTime":1542872256975,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272012/09/26\u0027 and expected text \u00272012/11/27\u0027 (Root cause: Actual text \u00272012/09/26\u0027 and expected text \u00272012/11/27\u0027 are not matched)","startTime":1542872256975,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872256975,"endTime":1542872257028,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872257028,"endTime":1542872257029,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$217,500\u0027 and expected text \u0027$198,500\u0027 (Root cause: Actual text \u0027$217,500\u0027 and expected text \u0027$198,500\u0027 are not matched)","description":"","startTime":1542872257029,"endTime":1542872257502,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$217,500\u0027 and expected text \u0027$198,500\u0027 (Root cause: Actual text \u0027$217,500\u0027 and expected text \u0027$198,500\u0027 are not matched)","startTime":1542872257501,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872257502,"endTime":1542872257502,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872257502,"endTime":1542872257502,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872257503,"endTime":1542872257529,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872257529,"endTime":1542872257530,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872257530,"endTime":1542872257530,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$85,600\u0027 and expected text \u0027$725,000\u0027 (Root cause: Actual text \u0027$85,600\u0027 and expected text \u0027$725,000\u0027 are not matched)","description":"","startTime":1542872257530,"endTime":1542872260304,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872257531,"endTime":1542872257562,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872257563,"endTime":1542872257563,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Doris Wilder\u0027 and expected text \u0027Paul Byrd\u0027 (Root cause: Actual text \u0027Doris Wilder\u0027 and expected text \u0027Paul Byrd\u0027 are not matched)","description":"","startTime":1542872257563,"endTime":1542872258869,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Doris Wilder\u0027 and expected text \u0027Paul Byrd\u0027 (Root cause: Actual text \u0027Doris Wilder\u0027 and expected text \u0027Paul Byrd\u0027 are not matched)","startTime":1542872258869,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872258869,"endTime":1542872259043,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872259043,"endTime":1542872259043,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Sales Assistant\u0027 and expected text \u0027Chief Financial Officer (CFO)\u0027 (Root cause: Actual text \u0027Sales Assistant\u0027 and expected text \u0027Chief Financial Officer (CFO)\u0027 are not matched)","description":"","startTime":1542872259044,"endTime":1542872259537,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Sales Assistant\u0027 and expected text \u0027Chief Financial Officer (CFO)\u0027 (Root cause: Actual text \u0027Sales Assistant\u0027 and expected text \u0027Chief Financial Officer (CFO)\u0027 are not matched)","startTime":1542872259536,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872259537,"endTime":1542872259776,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872259776,"endTime":1542872259776,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Sidney\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027Sidney\u0027 and expected text \u0027New York\u0027 are not matched)","description":"","startTime":1542872259776,"endTime":1542872259805,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Sidney\u0027 and expected text \u0027New York\u0027 (Root cause: Actual text \u0027Sidney\u0027 and expected text \u0027New York\u0027 are not matched)","startTime":1542872259805,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872259805,"endTime":1542872259849,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872259850,"endTime":1542872259850,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002723\u0027 and expected text \u002764\u0027 (Root cause: Actual text \u002723\u0027 and expected text \u002764\u0027 are not matched)","description":"","startTime":1542872259850,"endTime":1542872260033,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002723\u0027 and expected text \u002764\u0027 (Root cause: Actual text \u002723\u0027 and expected text \u002764\u0027 are not matched)","startTime":1542872260033,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872260033,"endTime":1542872260072,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872260073,"endTime":1542872260073,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272010/09/20\u0027 and expected text \u00272010/06/09\u0027 (Root cause: Actual text \u00272010/09/20\u0027 and expected text \u00272010/06/09\u0027 are not matched)","description":"","startTime":1542872260074,"endTime":1542872260104,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272010/09/20\u0027 and expected text \u00272010/06/09\u0027 (Root cause: Actual text \u00272010/09/20\u0027 and expected text \u00272010/06/09\u0027 are not matched)","startTime":1542872260104,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872260104,"endTime":1542872260274,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872260275,"endTime":1542872260275,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$85,600\u0027 and expected text \u0027$725,000\u0027 (Root cause: Actual text \u0027$85,600\u0027 and expected text \u0027$725,000\u0027 are not matched)","description":"","startTime":1542872260275,"endTime":1542872260304,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$85,600\u0027 and expected text \u0027$725,000\u0027 (Root cause: Actual text \u0027$85,600\u0027 and expected text \u0027$725,000\u0027 are not matched)","startTime":1542872260303,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872260304,"endTime":1542872260304,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872260305,"endTime":1542872260305,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872260305,"endTime":1542872260328,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872260328,"endTime":1542872260328,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872260329,"endTime":1542872260329,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$850,000\u0027 and expected text \u0027$327,900\u0027 (Root cause: Actual text \u0027$850,000\u0027 and expected text \u0027$327,900\u0027 are not matched)","description":"","startTime":1542872260329,"endTime":1542872261965,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872260329,"endTime":1542872260408,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872260408,"endTime":1542872260408,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Fiona Green\u0027 and expected text \u0027Rhona Davidson\u0027 (Root cause: Actual text \u0027Fiona Green\u0027 and expected text \u0027Rhona Davidson\u0027 are not matched)","description":"","startTime":1542872260408,"endTime":1542872260546,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Fiona Green\u0027 and expected text \u0027Rhona Davidson\u0027 (Root cause: Actual text \u0027Fiona Green\u0027 and expected text \u0027Rhona Davidson\u0027 are not matched)","startTime":1542872260545,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872260546,"endTime":1542872260620,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872260620,"endTime":1542872260631,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Chief Operating Officer (COO)\u0027 and expected text \u0027Integration Specialist\u0027 (Root cause: Actual text \u0027Chief Operating Officer (COO)\u0027 and expected text \u0027Integration Specialist\u0027 are not matched)","description":"","startTime":1542872260651,"endTime":1542872261429,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Chief Operating Officer (COO)\u0027 and expected text \u0027Integration Specialist\u0027 (Root cause: Actual text \u0027Chief Operating Officer (COO)\u0027 and expected text \u0027Integration Specialist\u0027 are not matched)","startTime":1542872261428,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872261429,"endTime":1542872261455,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872261456,"endTime":1542872261456,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027San Francisco\u0027 and expected text \u0027Tokyo\u0027 (Root cause: Actual text \u0027San Francisco\u0027 and expected text \u0027Tokyo\u0027 are not matched)","description":"","startTime":1542872261456,"endTime":1542872261490,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027San Francisco\u0027 and expected text \u0027Tokyo\u0027 (Root cause: Actual text \u0027San Francisco\u0027 and expected text \u0027Tokyo\u0027 are not matched)","startTime":1542872261490,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872261490,"endTime":1542872261545,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872261545,"endTime":1542872261546,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002748\u0027 and expected text \u002755\u0027 (Root cause: Actual text \u002748\u0027 and expected text \u002755\u0027 are not matched)","description":"","startTime":1542872261546,"endTime":1542872261674,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002748\u0027 and expected text \u002755\u0027 (Root cause: Actual text \u002748\u0027 and expected text \u002755\u0027 are not matched)","startTime":1542872261673,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872261674,"endTime":1542872261698,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872261698,"endTime":1542872261699,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272010/03/11\u0027 and expected text \u00272010/10/14\u0027 (Root cause: Actual text \u00272010/03/11\u0027 and expected text \u00272010/10/14\u0027 are not matched)","description":"","startTime":1542872261699,"endTime":1542872261724,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272010/03/11\u0027 and expected text \u00272010/10/14\u0027 (Root cause: Actual text \u00272010/03/11\u0027 and expected text \u00272010/10/14\u0027 are not matched)","startTime":1542872261723,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872261724,"endTime":1542872261837,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872261838,"endTime":1542872261839,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$850,000\u0027 and expected text \u0027$327,900\u0027 (Root cause: Actual text \u0027$850,000\u0027 and expected text \u0027$327,900\u0027 are not matched)","description":"","startTime":1542872261839,"endTime":1542872261965,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$850,000\u0027 and expected text \u0027$327,900\u0027 (Root cause: Actual text \u0027$850,000\u0027 and expected text \u0027$327,900\u0027 are not matched)","startTime":1542872261965,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872261965,"endTime":1542872261965,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872261965,"endTime":1542872261966,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872261966,"endTime":1542872262023,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872262024,"endTime":1542872262024,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872262024,"endTime":1542872262024,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$170,750\u0027 and expected text \u0027$103,600\u0027 (Root cause: Actual text \u0027$170,750\u0027 and expected text \u0027$103,600\u0027 are not matched)","description":"","startTime":1542872262024,"endTime":1542872264855,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872262025,"endTime":1542872262196,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872262196,"endTime":1542872262197,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Garrett Winters\u0027 and expected text \u0027Sonya Frost\u0027 (Root cause: Actual text \u0027Garrett Winters\u0027 and expected text \u0027Sonya Frost\u0027 are not matched)","description":"","startTime":1542872262197,"endTime":1542872263018,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Garrett Winters\u0027 and expected text \u0027Sonya Frost\u0027 (Root cause: Actual text \u0027Garrett Winters\u0027 and expected text \u0027Sonya Frost\u0027 are not matched)","startTime":1542872263018,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872263019,"endTime":1542872263076,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872263076,"endTime":1542872263077,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Accountant\u0027 and expected text \u0027Software Engineer\u0027 (Root cause: Actual text \u0027Accountant\u0027 and expected text \u0027Software Engineer\u0027 are not matched)","description":"","startTime":1542872263077,"endTime":1542872263412,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Accountant\u0027 and expected text \u0027Software Engineer\u0027 (Root cause: Actual text \u0027Accountant\u0027 and expected text \u0027Software Engineer\u0027 are not matched)","startTime":1542872263412,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872263419,"endTime":1542872263782,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872263783,"endTime":1542872263783,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Tokyo\u0027 and expected text \u0027Edinburgh\u0027 (Root cause: Actual text \u0027Tokyo\u0027 and expected text \u0027Edinburgh\u0027 are not matched)","description":"","startTime":1542872263783,"endTime":1542872264082,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Tokyo\u0027 and expected text \u0027Edinburgh\u0027 (Root cause: Actual text \u0027Tokyo\u0027 and expected text \u0027Edinburgh\u0027 are not matched)","startTime":1542872264081,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872264082,"endTime":1542872264308,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872264308,"endTime":1542872264309,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002763\u0027 and expected text \u002723\u0027 (Root cause: Actual text \u002763\u0027 and expected text \u002723\u0027 are not matched)","description":"","startTime":1542872264309,"endTime":1542872264348,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002763\u0027 and expected text \u002723\u0027 (Root cause: Actual text \u002763\u0027 and expected text \u002723\u0027 are not matched)","startTime":1542872264348,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872264348,"endTime":1542872264476,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872264476,"endTime":1542872264477,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272011/07/25\u0027 and expected text \u00272008/12/13\u0027 (Root cause: Actual text \u00272011/07/25\u0027 and expected text \u00272008/12/13\u0027 are not matched)","description":"","startTime":1542872264477,"endTime":1542872264559,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272011/07/25\u0027 and expected text \u00272008/12/13\u0027 (Root cause: Actual text \u00272011/07/25\u0027 and expected text \u00272008/12/13\u0027 are not matched)","startTime":1542872264559,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872264559,"endTime":1542872264757,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872264757,"endTime":1542872264757,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$170,750\u0027 and expected text \u0027$103,600\u0027 (Root cause: Actual text \u0027$170,750\u0027 and expected text \u0027$103,600\u0027 are not matched)","description":"","startTime":1542872264757,"endTime":1542872264855,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$170,750\u0027 and expected text \u0027$103,600\u0027 (Root cause: Actual text \u0027$170,750\u0027 and expected text \u0027$103,600\u0027 are not matched)","startTime":1542872264854,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872264855,"endTime":1542872264855,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872264856,"endTime":1542872264856,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872264856,"endTime":1542872264887,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872264889,"endTime":1542872264889,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872264890,"endTime":1542872264890,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$92,575\u0027 and expected text \u0027$320,800\u0027 (Root cause: Actual text \u0027$92,575\u0027 and expected text \u0027$320,800\u0027 are not matched)","description":"","startTime":1542872264890,"endTime":1542872267992,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872264890,"endTime":1542872264922,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872264923,"endTime":1542872264923,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Gavin Joyce\u0027 and expected text \u0027Tiger Nixon\u0027 (Root cause: Actual text \u0027Gavin Joyce\u0027 and expected text \u0027Tiger Nixon\u0027 are not matched)","description":"","startTime":1542872264923,"endTime":1542872265332,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Gavin Joyce\u0027 and expected text \u0027Tiger Nixon\u0027 (Root cause: Actual text \u0027Gavin Joyce\u0027 and expected text \u0027Tiger Nixon\u0027 are not matched)","startTime":1542872265331,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872265332,"endTime":1542872265499,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872265499,"endTime":1542872265500,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Developer\u0027 and expected text \u0027System Architect\u0027 (Root cause: Actual text \u0027Developer\u0027 and expected text \u0027System Architect\u0027 are not matched)","description":"","startTime":1542872265500,"endTime":1542872265634,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Developer\u0027 and expected text \u0027System Architect\u0027 (Root cause: Actual text \u0027Developer\u0027 and expected text \u0027System Architect\u0027 are not matched)","startTime":1542872265633,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872265634,"endTime":1542872265664,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872265664,"endTime":1542872265665,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","description":"","startTime":1542872265665,"endTime":1542872266135,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","startTime":1542872266134,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872266135,"endTime":1542872266171,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872266172,"endTime":1542872266172,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002742\u0027 and expected text \u002761\u0027 (Root cause: Actual text \u002742\u0027 and expected text \u002761\u0027 are not matched)","description":"","startTime":1542872266172,"endTime":1542872266497,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002742\u0027 and expected text \u002761\u0027 (Root cause: Actual text \u002742\u0027 and expected text \u002761\u0027 are not matched)","startTime":1542872266496,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872266497,"endTime":1542872266608,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872266609,"endTime":1542872266609,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u00272010/12/22\u0027 and expected text \u00272011/04/25\u0027 (Root cause: Actual text \u00272010/12/22\u0027 and expected text \u00272011/04/25\u0027 are not matched)","description":"","startTime":1542872266609,"endTime":1542872267249,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u00272010/12/22\u0027 and expected text \u00272011/04/25\u0027 (Root cause: Actual text \u00272010/12/22\u0027 and expected text \u00272011/04/25\u0027 are not matched)","startTime":1542872267249,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872267250,"endTime":1542872267442,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872267442,"endTime":1542872267443,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$92,575\u0027 and expected text \u0027$320,800\u0027 (Root cause: Actual text \u0027$92,575\u0027 and expected text \u0027$320,800\u0027 are not matched)","description":"","startTime":1542872267443,"endTime":1542872267992,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$92,575\u0027 and expected text \u0027$320,800\u0027 (Root cause: Actual text \u0027$92,575\u0027 and expected text \u0027$320,800\u0027 are not matched)","startTime":1542872267992,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - (row_data_table++)","description":"","startTime":1542872267993,"endTime":1542872267993,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println((row_data_table++))","description":"","startTime":1542872267993,"endTime":1542872267994,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1542872267995,"endTime":1542872269896,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1542872269896,"endTime":1542872269897,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1542872269897,"endTime":1542872269897,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Reading database data with query \u0027SELECT Name,Position,Office,Age,convert(varchar, StartDate, 111)as StartDate,\u0027$\u0027 + replace(CONVERT(VARCHAR(100),CAST(Salary AS MONEY),1), \u0027.00\u0027,\u0027\u0027) from Data_Table\u0027","description":"","startTime":1542872269897,"endTime":1542872272330,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1542872269898,"endTime":1542872270431,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1542872270431,"endTime":1542872270431,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Reading database data with query \u0027SELECT Name,Position,Office,Age,convert(varchar, StartDate, 111)as StartDate,\u0027$\u0027 + replace(CONVERT(VARCHAR(100),CAST(Salary AS MONEY),1), \u0027.00\u0027,\u0027\u0027) from Data_Table\u0027","description":"","startTime":1542872270432,"endTime":1542872272330,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Catch (Exception e)","description":"","startTime":1542872272331,"endTime":1542872272346,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Throw e.getMessage()","description":"","startTime":1542872272331,"endTime":1542872272346,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Test Cases/Demo/DataTable FAILED because (of) (Stack trace: com.kms.katalon.core.exception.StepFailedException: Unable to verify match between actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 (Root cause: Actual text \u0027Airi Satou\u0027 and expected text \u0027Angelica Ramos\u0027 are not matched)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:32)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:56)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.verifyMatch(VerifyMatchKeyword.groovy:61)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.execute(VerifyMatchKeyword.groovy:46)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)\r\n\tat com.kms.katalon.core.keyword.BuiltinKeywords.verifyMatch(BuiltinKeywords.groovy:55)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\r\n\tat groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)\r\n\tat org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:149)\r\n\tat Script1542702721131.run(Script1542702721131.groovy:51)\r\n\tat com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)\r\n\tat com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)\r\n\tat com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)\r\n\tat com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)\r\n\tat TempTestSuite1542872206542.run(TempTestSuite1542872206542.groovy:36)\r\n\tat groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:518)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:507)\r\n\tat groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)\r\n\tat groovy.ui.GroovyMain.run(GroovyMain.java:384)\r\n\tat groovy.ui.GroovyMain.process(GroovyMain.java:370)\r\n\tat groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)\r\n\tat groovy.ui.GroovyMain.main(GroovyMain.java:109)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)\r\n)","startTime":1542872272349,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false}