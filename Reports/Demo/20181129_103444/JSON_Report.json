{"devicePlatform":"","logFolder":"E:\\WORK\\Katalon_CURA Testproject\\Reports\\Demo\\20181129_103444","runData":{"hostName":"longnguyen - LONGNGUYEN.vodc.lan","os":"Windows 10 64bit","katalonVersion":"5.9.0.1","browser":"Chrome 70.0.3538.110","dbServerInfo":"Microsoft SQL Server 12.00.4100","hostAddress":"10.10.10.62","sessionId":"3be1716cdc26eb061c3439f030053a03","seleniumVersion":"3.7.1","proxyInformation":"ProxyInformation{proxyOption\u003dNO_PROXY, proxyServerType\u003dHTTP, password\u003d, proxyServerAddress\u003d, proxyServerPort\u003d0}","platform":"Windows 10"},"type":"TEST_SUITE","name":"Demo","id":"Test Suites/Demo","source":"","message":"Test Cases/Demo/DataTable_Pagination FAILED because (of) (Stack trace: com.kms.katalon.core.exception.StepFailedException: Unable to verify match between actual text \u002761\u0027 and expected text \u002762\u0027 (Root cause: Actual text \u002761\u0027 and expected text \u002762\u0027 are not matched)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:32)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:56)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.verifyMatch(VerifyMatchKeyword.groovy:61)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.execute(VerifyMatchKeyword.groovy:46)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)\r\n\tat com.kms.katalon.core.keyword.BuiltinKeywords.verifyMatch(BuiltinKeywords.groovy:55)\r\n\tat sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\r\n\tat groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)\r\n\tat org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:149)\r\n\tat Script1542877361903.run(Script1542877361903.groovy:56)\r\n\tat com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)\r\n\tat com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)\r\n\tat com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)\r\n\tat com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)\r\n\tat TempTestSuite1543462484438.run(TempTestSuite1543462484438.groovy:36)\r\n\tat groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:518)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:507)\r\n\tat groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)\r\n\tat groovy.ui.GroovyMain.run(GroovyMain.java:384)\r\n\tat groovy.ui.GroovyMain.process(GroovyMain.java:370)\r\n\tat groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)\r\n\tat groovy.ui.GroovyMain.main(GroovyMain.java:109)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)\r\n)","description":"","startTime":1543462489286,"endTime":1543462571059,"childRecords":[{"isOptional":false,"type":"TEST_CASE","name":"Test Cases/Demo/DataTable_Pagination","id":"Test Cases/Demo/DataTable_Pagination","source":"E:\\\\WORK\\\\Katalon_CURA Testproject\\\\Test Cases\\\\Demo\\\\DataTable_Pagination.tc","message":"Test Cases/Demo/DataTable_Pagination FAILED because (of) (Stack trace: com.kms.katalon.core.exception.StepFailedException: Unable to verify match between actual text \u002761\u0027 and expected text \u002762\u0027 (Root cause: Actual text \u002761\u0027 and expected text \u002762\u0027 are not matched)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:32)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:56)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.verifyMatch(VerifyMatchKeyword.groovy:61)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.execute(VerifyMatchKeyword.groovy:46)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)\r\n\tat com.kms.katalon.core.keyword.BuiltinKeywords.verifyMatch(BuiltinKeywords.groovy:55)\r\n\tat sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\r\n\tat groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)\r\n\tat org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:149)\r\n\tat Script1542877361903.run(Script1542877361903.groovy:56)\r\n\tat com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)\r\n\tat com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)\r\n\tat com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)\r\n\tat com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)\r\n\tat TempTestSuite1543462484438.run(TempTestSuite1543462484438.groovy:36)\r\n\tat groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:518)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:507)\r\n\tat groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)\r\n\tat groovy.ui.GroovyMain.run(GroovyMain.java:384)\r\n\tat groovy.ui.GroovyMain.process(GroovyMain.java:370)\r\n\tat groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)\r\n\tat groovy.ui.GroovyMain.main(GroovyMain.java:109)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)\r\n)","description":"","startTime":1543462490106,"endTime":1543462571059,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"INFO"},"type":"MESSAGE","name":"","message":"Evaluating variables for test case","startTime":1543462490152,"endTime":0,"childRecords":[],"interuppted":false},{"index":-1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Start listener action : sampleBeforeTestCase","message":"Invoke \u0027com.kms.katalon.core.annotation.BeforeTestCase\u0027 method: \u0027NewTestListener.sampleBeforeTestCase(...)\u0027 completed.","description":"","startTime":1543462490167,"endTime":1543462490251,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(testCaseContext.getTestCaseId())","description":"","startTime":1543462490227,"endTime":1543462490241,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(testCaseContext.getTestCaseVariables())","message":"Invoke \u0027com.kms.katalon.core.annotation.BeforeTestCase\u0027 method: \u0027NewTestListener.sampleBeforeTestCase(...)\u0027 completed.","description":"","startTime":1543462490242,"endTime":1543462490246,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"openBrowser","message":"Browser is opened with url: \u0027\u0027","description":"Open Browser and Navigate to DataTable Page","startTime":1543462490833,"endTime":1543462497225,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Browser is opened with url: \u0027\u0027","startTime":1543462497224,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"navigateToUrl","message":"Navigate to \u0027file:/E:/WORK/PassPulFramework/PassPul/PassPul/SeleniumEasy/www.seleniumeasy.com/test/table-data-download-demo.html\u0027 successfully","description":"","startTime":1543462497226,"endTime":1543462498921,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Navigate to \u0027file:/E:/WORK/PassPulFramework/PassPul/PassPul/SeleniumEasy/www.seleniumeasy.com/test/table-data-download-demo.html\u0027 successfully","startTime":1543462498920,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"maximizeWindow","message":"Current window maximized","description":"","startTime":1543462498921,"endTime":1543462500790,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Current window maximized","startTime":1543462500789,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"scrollToPosition","message":"Browser is scrolled to position x \u003d 250, y \u003d 250","description":"","startTime":1543462500790,"endTime":1543462500907,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Browser is scrolled to position x \u003d 250, y \u003d 250","startTime":1543462500906,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - driver \u003d com.kms.katalon.core.webui.driver.DriverFactory.getWebDriver()","description":"","startTime":1543462500907,"endTime":1543462500924,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - pagination \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\"example_paginate\"]/span/a\"))","description":"Get Pages in DataTable","startTime":1543462500925,"endTime":1543462501084,"childRecords":[],"interuppted":false},{"index":7,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - size \u003d pagination.size()","description":"","startTime":1543462501084,"endTime":1543462501085,"childRecords":[],"interuppted":false},{"index":8,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Total Pages of this site is :\" + size)","description":"","startTime":1543462501086,"endTime":1543462501100,"childRecords":[],"interuppted":false},{"index":9,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d 1","description":"Go to each page to get data in DataTable","startTime":1543462501102,"endTime":1543462501108,"childRecords":[],"interuppted":false},{"index":10,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([i \u003d 1, i \u003c\u003d size, (i++)])","description":"","startTime":1543462501109,"endTime":1543462571052,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Try","description":"","startTime":1543462501110,"endTime":1543462527373,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - element \u003d driver.findElement(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example_paginate\u0027]/span/a[\" + i + \"]\")).click()","description":"Get Table Locator and count row and column total","startTime":1543462501111,"endTime":1543462501402,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - java.lang.Thread.sleep(2000)","description":"","startTime":1543462501403,"endTime":1543462503419,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_table \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example\u0027]/tbody/tr\"))","description":"","startTime":1543462503420,"endTime":1543462503472,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_count \u003d row_table.size()","description":"","startTime":1543462503473,"endTime":1543462503474,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of rows of page \" + i + \" are : \" + row_count)","description":"","startTime":1543462503475,"endTime":1543462503477,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([row \u003d 0, row \u003c row_count, (row++)])","description":"","startTime":1543462503478,"endTime":1543462527373,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462503479,"endTime":1543462503560,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462503561,"endTime":1543462503563,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462503564,"endTime":1543462503566,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$162,700\u0027 and expected text \u0027$162,700\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462503566,"endTime":1543462506527,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462503568,"endTime":1543462503606,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462503606,"endTime":1543462503610,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Airi Satou\u0027 and expected text \u0027Airi Satou\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462503611,"endTime":1543462504532,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Airi Satou\u0027 and expected text \u0027Airi Satou\u0027 are matched ","startTime":1543462504532,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462504533,"endTime":1543462504814,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462504814,"endTime":1543462504815,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Accountant\u0027 and expected text \u0027Accountant\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462504815,"endTime":1543462504977,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Accountant\u0027 and expected text \u0027Accountant\u0027 are matched ","startTime":1543462504973,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462504978,"endTime":1543462505094,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462505095,"endTime":1543462505096,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Tokyo\u0027 and expected text \u0027Tokyo\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462505096,"endTime":1543462505295,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Tokyo\u0027 and expected text \u0027Tokyo\u0027 are matched ","startTime":1543462505295,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462505296,"endTime":1543462505362,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462505363,"endTime":1543462505364,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002733\u0027 and expected text \u002733\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462505364,"endTime":1543462505641,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002733\u0027 and expected text \u002733\u0027 are matched ","startTime":1543462505639,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462505641,"endTime":1543462505992,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462505993,"endTime":1543462505994,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272008/11/28\u0027 and expected text \u00272008/11/28\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462506003,"endTime":1543462506260,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272008/11/28\u0027 and expected text \u00272008/11/28\u0027 are matched ","startTime":1543462506260,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462506261,"endTime":1543462506312,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462506313,"endTime":1543462506313,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$162,700\u0027 and expected text \u0027$162,700\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462506313,"endTime":1543462506527,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$162,700\u0027 and expected text \u0027$162,700\u0027 are matched ","startTime":1543462506526,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462506528,"endTime":1543462506530,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462506530,"endTime":1543462506531,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462506531,"endTime":1543462506568,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462506568,"endTime":1543462506569,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462506569,"endTime":1543462506570,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$1,200,000\u0027 and expected text \u0027$1,200,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462506570,"endTime":1543462508710,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462506570,"endTime":1543462506701,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462506702,"endTime":1543462506702,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Angelica Ramos\u0027 and expected text \u0027Angelica Ramos\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462506702,"endTime":1543462506836,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Angelica Ramos\u0027 and expected text \u0027Angelica Ramos\u0027 are matched ","startTime":1543462506835,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462506836,"endTime":1543462506870,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462506870,"endTime":1543462506871,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Chief Executive Officer (CEO)\u0027 and expected text \u0027Chief Executive Officer (CEO)\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462506871,"endTime":1543462507341,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Chief Executive Officer (CEO)\u0027 and expected text \u0027Chief Executive Officer (CEO)\u0027 are matched ","startTime":1543462507340,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462507342,"endTime":1543462507387,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462507387,"endTime":1543462507388,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462507388,"endTime":1543462507641,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","startTime":1543462507641,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462507642,"endTime":1543462507687,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462507688,"endTime":1543462507689,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002747\u0027 and expected text \u002747\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462507690,"endTime":1543462507941,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002747\u0027 and expected text \u002747\u0027 are matched ","startTime":1543462507941,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462507941,"endTime":1543462508120,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462508121,"endTime":1543462508122,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272009/10/09\u0027 and expected text \u00272009/10/09\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462508122,"endTime":1543462508430,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272009/10/09\u0027 and expected text \u00272009/10/09\u0027 are matched ","startTime":1543462508430,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462508431,"endTime":1543462508538,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462508538,"endTime":1543462508539,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$1,200,000\u0027 and expected text \u0027$1,200,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462508539,"endTime":1543462508710,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$1,200,000\u0027 and expected text \u0027$1,200,000\u0027 are matched ","startTime":1543462508710,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462508710,"endTime":1543462508711,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462508711,"endTime":1543462508712,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462508712,"endTime":1543462508889,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462508890,"endTime":1543462508891,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462508891,"endTime":1543462508892,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$86,000\u0027 and expected text \u0027$86,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462508892,"endTime":1543462511086,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462508892,"endTime":1543462508980,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462508980,"endTime":1543462508981,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Ashton Cox\u0027 and expected text \u0027Ashton Cox\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462508982,"endTime":1543462509018,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Ashton Cox\u0027 and expected text \u0027Ashton Cox\u0027 are matched ","startTime":1543462509018,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462509019,"endTime":1543462509155,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462509155,"endTime":1543462509156,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Junior Technical Author\u0027 and expected text \u0027Junior Technical Author\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462509157,"endTime":1543462509244,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Junior Technical Author\u0027 and expected text \u0027Junior Technical Author\u0027 are matched ","startTime":1543462509244,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462509244,"endTime":1543462509276,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462509277,"endTime":1543462509278,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462509278,"endTime":1543462509587,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1543462509587,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462509587,"endTime":1543462509763,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462509763,"endTime":1543462509764,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002766\u0027 and expected text \u002766\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462509764,"endTime":1543462510035,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002766\u0027 and expected text \u002766\u0027 are matched ","startTime":1543462510035,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462510036,"endTime":1543462510173,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462510173,"endTime":1543462510174,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272009/01/12\u0027 and expected text \u00272009/01/12\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462510174,"endTime":1543462510409,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272009/01/12\u0027 and expected text \u00272009/01/12\u0027 are matched ","startTime":1543462510409,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462510409,"endTime":1543462510595,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462510595,"endTime":1543462510596,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$86,000\u0027 and expected text \u0027$86,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462510596,"endTime":1543462511085,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$86,000\u0027 and expected text \u0027$86,000\u0027 are matched ","startTime":1543462511084,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462511086,"endTime":1543462511086,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462511087,"endTime":1543462511087,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462511087,"endTime":1543462511125,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462511125,"endTime":1543462511126,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462511126,"endTime":1543462511126,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$132,000\u0027 and expected text \u0027$132,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462511127,"endTime":1543462513304,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462511127,"endTime":1543462511162,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462511163,"endTime":1543462511163,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Bradley Greer\u0027 and expected text \u0027Bradley Greer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462511163,"endTime":1543462511990,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Bradley Greer\u0027 and expected text \u0027Bradley Greer\u0027 are matched ","startTime":1543462511990,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462511991,"endTime":1543462512107,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462512107,"endTime":1543462512108,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Software Engineer\u0027 and expected text \u0027Software Engineer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462512108,"endTime":1543462512246,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Software Engineer\u0027 and expected text \u0027Software Engineer\u0027 are matched ","startTime":1543462512246,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462512246,"endTime":1543462512294,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462512295,"endTime":1543462512295,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462512295,"endTime":1543462512517,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","startTime":1543462512517,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462512517,"endTime":1543462512567,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462512568,"endTime":1543462512569,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002741\u0027 and expected text \u002741\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462512574,"endTime":1543462512740,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002741\u0027 and expected text \u002741\u0027 are matched ","startTime":1543462512740,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462512740,"endTime":1543462512773,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462512774,"endTime":1543462512775,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272012/10/13\u0027 and expected text \u00272012/10/13\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462512775,"endTime":1543462512903,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272012/10/13\u0027 and expected text \u00272012/10/13\u0027 are matched ","startTime":1543462512901,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462512903,"endTime":1543462512997,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462512998,"endTime":1543462512998,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$132,000\u0027 and expected text \u0027$132,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462512998,"endTime":1543462513304,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$132,000\u0027 and expected text \u0027$132,000\u0027 are matched ","startTime":1543462513303,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462513304,"endTime":1543462513304,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462513304,"endTime":1543462513307,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462513307,"endTime":1543462513498,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462513498,"endTime":1543462513499,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462513500,"endTime":1543462513501,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$206,850\u0027 and expected text \u0027$206,850\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462513501,"endTime":1543462515415,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462513502,"endTime":1543462513556,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462513558,"endTime":1543462513559,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Brenden Wagner\u0027 and expected text \u0027Brenden Wagner\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462513559,"endTime":1543462513780,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Brenden Wagner\u0027 and expected text \u0027Brenden Wagner\u0027 are matched ","startTime":1543462513779,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462513780,"endTime":1543462513835,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462513835,"endTime":1543462513835,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Software Engineer\u0027 and expected text \u0027Software Engineer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462513836,"endTime":1543462514033,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Software Engineer\u0027 and expected text \u0027Software Engineer\u0027 are matched ","startTime":1543462514032,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462514033,"endTime":1543462514162,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462514162,"endTime":1543462514164,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462514164,"endTime":1543462514658,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1543462514658,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462514658,"endTime":1543462514847,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462514847,"endTime":1543462514848,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002728\u0027 and expected text \u002728\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462514848,"endTime":1543462514878,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002728\u0027 and expected text \u002728\u0027 are matched ","startTime":1543462514878,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462514878,"endTime":1543462515087,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462515087,"endTime":1543462515088,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272011/06/07\u0027 and expected text \u00272011/06/07\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462515088,"endTime":1543462515293,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272011/06/07\u0027 and expected text \u00272011/06/07\u0027 are matched ","startTime":1543462515293,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462515293,"endTime":1543462515369,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462515370,"endTime":1543462515370,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$206,850\u0027 and expected text \u0027$206,850\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462515370,"endTime":1543462515414,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$206,850\u0027 and expected text \u0027$206,850\u0027 are matched ","startTime":1543462515414,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462515416,"endTime":1543462515417,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462515424,"endTime":1543462515425,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462515425,"endTime":1543462515778,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462515778,"endTime":1543462515779,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462515779,"endTime":1543462515780,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Unable to verify match between actual text \u0027$372,000\u0027 and expected text \u0027$500,000\u0027 (Root cause: Actual text \u0027$372,000\u0027 and expected text \u0027$500,000\u0027 are not matched)","description":"Fetch through each row and column to get data","startTime":1543462515781,"endTime":1543462518374,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462515781,"endTime":1543462515906,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462515907,"endTime":1543462515907,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Brielle Williamson\u0027 and expected text \u0027Brielle Williamson\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462515907,"endTime":1543462516166,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Brielle Williamson\u0027 and expected text \u0027Brielle Williamson\u0027 are matched ","startTime":1543462516165,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462516166,"endTime":1543462516547,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462516547,"endTime":1543462516548,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Integration Specialist\u0027 and expected text \u0027Integration Specialist\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462516548,"endTime":1543462516603,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Integration Specialist\u0027 and expected text \u0027Integration Specialist\u0027 are matched ","startTime":1543462516602,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462516603,"endTime":1543462516638,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462516638,"endTime":1543462516638,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462516638,"endTime":1543462517102,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","startTime":1543462517102,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462517102,"endTime":1543462517164,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462517164,"endTime":1543462517165,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002761\u0027 and expected text \u002762\u0027 (Root cause: Actual text \u002761\u0027 and expected text \u002762\u0027 are not matched)","description":"Mapping (Compare) data on Table with Database","startTime":1543462517165,"endTime":1543462517399,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002761\u0027 and expected text \u002762\u0027 (Root cause: Actual text \u002761\u0027 and expected text \u002762\u0027 are not matched)","startTime":1543462517399,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462517400,"endTime":1543462517650,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462517650,"endTime":1543462517651,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272012/12/02\u0027 and expected text \u00272012/12/02\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462517651,"endTime":1543462518205,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272012/12/02\u0027 and expected text \u00272012/12/02\u0027 are matched ","startTime":1543462518205,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462518205,"endTime":1543462518313,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462518313,"endTime":1543462518314,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027$372,000\u0027 and expected text \u0027$500,000\u0027 (Root cause: Actual text \u0027$372,000\u0027 and expected text \u0027$500,000\u0027 are not matched)","description":"Mapping (Compare) data on Table with Database","startTime":1543462518314,"endTime":1543462518374,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027$372,000\u0027 and expected text \u0027$500,000\u0027 (Root cause: Actual text \u0027$372,000\u0027 and expected text \u0027$500,000\u0027 are not matched)","startTime":1543462518373,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462518374,"endTime":1543462518374,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462518374,"endTime":1543462518375,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462518375,"endTime":1543462518485,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462518487,"endTime":1543462518487,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462518487,"endTime":1543462518488,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$106,450\u0027 and expected text \u0027$106,450\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462518489,"endTime":1543462520820,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462518489,"endTime":1543462518616,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462518617,"endTime":1543462518617,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Caesar Vance\u0027 and expected text \u0027Caesar Vance\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462518617,"endTime":1543462518942,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Caesar Vance\u0027 and expected text \u0027Caesar Vance\u0027 are matched ","startTime":1543462518941,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462518942,"endTime":1543462519071,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462519071,"endTime":1543462519072,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Pre-Sales Support\u0027 and expected text \u0027Pre-Sales Support\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462519072,"endTime":1543462519522,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Pre-Sales Support\u0027 and expected text \u0027Pre-Sales Support\u0027 are matched ","startTime":1543462519522,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462519523,"endTime":1543462519627,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462519627,"endTime":1543462519628,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462519628,"endTime":1543462519811,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","startTime":1543462519811,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462519811,"endTime":1543462519990,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462519990,"endTime":1543462519992,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002721\u0027 and expected text \u002721\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462519993,"endTime":1543462520299,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002721\u0027 and expected text \u002721\u0027 are matched ","startTime":1543462520299,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462520299,"endTime":1543462520495,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462520495,"endTime":1543462520495,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272011/12/12\u0027 and expected text \u00272011/12/12\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462520496,"endTime":1543462520580,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272011/12/12\u0027 and expected text \u00272011/12/12\u0027 are matched ","startTime":1543462520580,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462520580,"endTime":1543462520617,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462520617,"endTime":1543462520617,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$106,450\u0027 and expected text \u0027$106,450\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462520617,"endTime":1543462520819,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$106,450\u0027 and expected text \u0027$106,450\u0027 are matched ","startTime":1543462520819,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462520820,"endTime":1543462520820,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462520820,"endTime":1543462520820,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462520821,"endTime":1543462520859,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462520859,"endTime":1543462520859,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462520860,"endTime":1543462520860,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$433,060\u0027 and expected text \u0027$433,060\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462520860,"endTime":1543462523572,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462520865,"endTime":1543462520986,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462520986,"endTime":1543462520986,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Cedric Kelly\u0027 and expected text \u0027Cedric Kelly\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462520987,"endTime":1543462521107,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Cedric Kelly\u0027 and expected text \u0027Cedric Kelly\u0027 are matched ","startTime":1543462521107,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462521107,"endTime":1543462521145,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462521157,"endTime":1543462521157,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Senior Javascript Developer\u0027 and expected text \u0027Senior Javascript Developer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462521157,"endTime":1543462521416,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Senior Javascript Developer\u0027 and expected text \u0027Senior Javascript Developer\u0027 are matched ","startTime":1543462521416,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462521417,"endTime":1543462521454,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462521454,"endTime":1543462521455,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462521455,"endTime":1543462521704,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","startTime":1543462521704,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462521704,"endTime":1543462521783,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462521783,"endTime":1543462521784,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002722\u0027 and expected text \u002722\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462521784,"endTime":1543462522167,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002722\u0027 and expected text \u002722\u0027 are matched ","startTime":1543462522167,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462522167,"endTime":1543462522444,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462522444,"endTime":1543462522446,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272012/03/29\u0027 and expected text \u00272012/03/29\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462522446,"endTime":1543462522481,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272012/03/29\u0027 and expected text \u00272012/03/29\u0027 are matched ","startTime":1543462522480,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462522481,"endTime":1543462522564,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462522584,"endTime":1543462522591,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$433,060\u0027 and expected text \u0027$433,060\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462522591,"endTime":1543462523572,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$433,060\u0027 and expected text \u0027$433,060\u0027 are matched ","startTime":1543462523572,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462523572,"endTime":1543462523573,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462523573,"endTime":1543462523573,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462523573,"endTime":1543462523737,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462523738,"endTime":1543462523738,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462523738,"endTime":1543462523738,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$470,600\u0027 and expected text \u0027$470,600\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462523738,"endTime":1543462524891,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462523739,"endTime":1543462523765,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462523765,"endTime":1543462523766,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Charde Marshall\u0027 and expected text \u0027Charde Marshall\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462523766,"endTime":1543462523789,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Charde Marshall\u0027 and expected text \u0027Charde Marshall\u0027 are matched ","startTime":1543462523789,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462523789,"endTime":1543462523820,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462523821,"endTime":1543462523821,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Regional Director\u0027 and expected text \u0027Regional Director\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462523821,"endTime":1543462524110,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Regional Director\u0027 and expected text \u0027Regional Director\u0027 are matched ","startTime":1543462524110,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462524110,"endTime":1543462524140,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462524141,"endTime":1543462524141,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462524141,"endTime":1543462524431,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1543462524398,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462524431,"endTime":1543462524627,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462524628,"endTime":1543462524629,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002736\u0027 and expected text \u002736\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462524629,"endTime":1543462524667,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002736\u0027 and expected text \u002736\u0027 are matched ","startTime":1543462524667,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462524667,"endTime":1543462524704,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462524704,"endTime":1543462524704,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272008/10/16\u0027 and expected text \u00272008/10/16\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462524705,"endTime":1543462524773,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272008/10/16\u0027 and expected text \u00272008/10/16\u0027 are matched ","startTime":1543462524773,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462524773,"endTime":1543462524802,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462524802,"endTime":1543462524803,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$470,600\u0027 and expected text \u0027$470,600\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462524803,"endTime":1543462524891,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$470,600\u0027 and expected text \u0027$470,600\u0027 are matched ","startTime":1543462524891,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462524891,"endTime":1543462524891,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462524891,"endTime":1543462524892,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462524892,"endTime":1543462525758,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462525759,"endTime":1543462525759,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462525759,"endTime":1543462525759,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$205,500\u0027 and expected text \u0027$205,500\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462525759,"endTime":1543462527370,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462525760,"endTime":1543462525791,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462525792,"endTime":1543462525792,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Colleen Hurst\u0027 and expected text \u0027Colleen Hurst\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462525792,"endTime":1543462525867,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Colleen Hurst\u0027 and expected text \u0027Colleen Hurst\u0027 are matched ","startTime":1543462525866,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462525867,"endTime":1543462526061,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462526061,"endTime":1543462526062,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Javascript Developer\u0027 and expected text \u0027Javascript Developer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462526062,"endTime":1543462526098,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Javascript Developer\u0027 and expected text \u0027Javascript Developer\u0027 are matched ","startTime":1543462526097,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462526131,"endTime":1543462526361,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462526361,"endTime":1543462526362,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462526363,"endTime":1543462526388,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1543462526388,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462526388,"endTime":1543462526428,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462526428,"endTime":1543462526429,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002739\u0027 and expected text \u002739\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462526429,"endTime":1543462526618,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002739\u0027 and expected text \u002739\u0027 are matched ","startTime":1543462526618,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462526619,"endTime":1543462526652,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462526652,"endTime":1543462526653,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272009/09/15\u0027 and expected text \u00272009/09/15\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462526653,"endTime":1543462526847,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272009/09/15\u0027 and expected text \u00272009/09/15\u0027 are matched ","startTime":1543462526847,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462526848,"endTime":1543462526899,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462526899,"endTime":1543462526899,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$205,500\u0027 and expected text \u0027$205,500\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462526900,"endTime":1543462527370,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$205,500\u0027 and expected text \u0027$205,500\u0027 are matched ","startTime":1543462527370,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462527370,"endTime":1543462527371,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462527371,"endTime":1543462527373,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Try","description":"","startTime":1543462527374,"endTime":1543462548830,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - element \u003d driver.findElement(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example_paginate\u0027]/span/a[\" + i + \"]\")).click()","description":"Get Table Locator and count row and column total","startTime":1543462527374,"endTime":1543462527912,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - java.lang.Thread.sleep(2000)","description":"","startTime":1543462527913,"endTime":1543462529914,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_table \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example\u0027]/tbody/tr\"))","description":"","startTime":1543462529915,"endTime":1543462530074,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_count \u003d row_table.size()","description":"","startTime":1543462530075,"endTime":1543462530075,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of rows of page \" + i + \" are : \" + row_count)","description":"","startTime":1543462530075,"endTime":1543462530075,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([row \u003d 0, row \u003c row_count, (row++)])","description":"","startTime":1543462530076,"endTime":1543462548829,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462530076,"endTime":1543462530216,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462530216,"endTime":1543462530216,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462530216,"endTime":1543462530217,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$217,500\u0027 and expected text \u0027$217,500\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462530217,"endTime":1543462531940,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462530217,"endTime":1543462530390,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462530390,"endTime":1543462530391,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Dai Rios\u0027 and expected text \u0027Dai Rios\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462530391,"endTime":1543462530531,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Dai Rios\u0027 and expected text \u0027Dai Rios\u0027 are matched ","startTime":1543462530531,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462530531,"endTime":1543462530639,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462530639,"endTime":1543462530641,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Personnel Lead\u0027 and expected text \u0027Personnel Lead\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462530641,"endTime":1543462530845,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Personnel Lead\u0027 and expected text \u0027Personnel Lead\u0027 are matched ","startTime":1543462530844,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462530845,"endTime":1543462530939,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462530940,"endTime":1543462530940,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462530940,"endTime":1543462531232,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","startTime":1543462531231,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462531236,"endTime":1543462531290,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462531291,"endTime":1543462531291,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002735\u0027 and expected text \u002735\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462531291,"endTime":1543462531462,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002735\u0027 and expected text \u002735\u0027 are matched ","startTime":1543462531461,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462531462,"endTime":1543462531502,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462531503,"endTime":1543462531503,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272012/09/26\u0027 and expected text \u00272012/09/26\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462531503,"endTime":1543462531692,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272012/09/26\u0027 and expected text \u00272012/09/26\u0027 are matched ","startTime":1543462531692,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462531692,"endTime":1543462531742,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462531742,"endTime":1543462531743,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$217,500\u0027 and expected text \u0027$217,500\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462531743,"endTime":1543462531940,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$217,500\u0027 and expected text \u0027$217,500\u0027 are matched ","startTime":1543462531940,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462531940,"endTime":1543462531940,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462531941,"endTime":1543462531941,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462531941,"endTime":1543462531979,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462531979,"endTime":1543462531980,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462531980,"endTime":1543462531981,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$85,600\u0027 and expected text \u0027$85,600\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462531981,"endTime":1543462533755,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462531983,"endTime":1543462532116,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462532117,"endTime":1543462532117,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Doris Wilder\u0027 and expected text \u0027Doris Wilder\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462532117,"endTime":1543462532487,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Doris Wilder\u0027 and expected text \u0027Doris Wilder\u0027 are matched ","startTime":1543462532487,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462532487,"endTime":1543462532524,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462532524,"endTime":1543462532525,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Sales Assistant\u0027 and expected text \u0027Sales Assistant\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462532526,"endTime":1543462532659,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Sales Assistant\u0027 and expected text \u0027Sales Assistant\u0027 are matched ","startTime":1543462532659,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462532659,"endTime":1543462532737,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462532737,"endTime":1543462532737,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Sidney\u0027 and expected text \u0027Sidney\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462532738,"endTime":1543462532773,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Sidney\u0027 and expected text \u0027Sidney\u0027 are matched ","startTime":1543462532773,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462532773,"endTime":1543462532910,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462532910,"endTime":1543462532911,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002723\u0027 and expected text \u002723\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462532912,"endTime":1543462533018,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002723\u0027 and expected text \u002723\u0027 are matched ","startTime":1543462533018,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462533018,"endTime":1543462533057,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462533057,"endTime":1543462533058,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272010/09/20\u0027 and expected text \u00272010/09/20\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462533058,"endTime":1543462533487,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272010/09/20\u0027 and expected text \u00272010/09/20\u0027 are matched ","startTime":1543462533487,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462533488,"endTime":1543462533636,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462533637,"endTime":1543462533637,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$85,600\u0027 and expected text \u0027$85,600\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462533637,"endTime":1543462533754,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$85,600\u0027 and expected text \u0027$85,600\u0027 are matched ","startTime":1543462533754,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462533755,"endTime":1543462533755,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462533755,"endTime":1543462533756,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462533756,"endTime":1543462533796,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462533796,"endTime":1543462533796,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462533796,"endTime":1543462533797,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$850,000\u0027 and expected text \u0027$850,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462533797,"endTime":1543462535830,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462533797,"endTime":1543462533909,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462533909,"endTime":1543462533909,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Fiona Green\u0027 and expected text \u0027Fiona Green\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462533910,"endTime":1543462534011,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Fiona Green\u0027 and expected text \u0027Fiona Green\u0027 are matched ","startTime":1543462534011,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462534011,"endTime":1543462534045,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462534046,"endTime":1543462534046,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Chief Operating Officer (COO)\u0027 and expected text \u0027Chief Operating Officer (COO)\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462534046,"endTime":1543462534072,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Chief Operating Officer (COO)\u0027 and expected text \u0027Chief Operating Officer (COO)\u0027 are matched ","startTime":1543462534072,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462534072,"endTime":1543462534236,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462534236,"endTime":1543462534236,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462534237,"endTime":1543462534274,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1543462534274,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462534275,"endTime":1543462534403,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462534403,"endTime":1543462534404,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u002748\u0027 and expected text \u002750\u0027 (Root cause: Actual text \u002748\u0027 and expected text \u002750\u0027 are not matched)","description":"Mapping (Compare) data on Table with Database","startTime":1543462534404,"endTime":1543462535561,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u002748\u0027 and expected text \u002750\u0027 (Root cause: Actual text \u002748\u0027 and expected text \u002750\u0027 are not matched)","startTime":1543462535560,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462535561,"endTime":1543462535602,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462535602,"endTime":1543462535602,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272010/03/11\u0027 and expected text \u00272010/03/11\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462535602,"endTime":1543462535628,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272010/03/11\u0027 and expected text \u00272010/03/11\u0027 are matched ","startTime":1543462535628,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462535628,"endTime":1543462535659,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462535659,"endTime":1543462535659,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$850,000\u0027 and expected text \u0027$850,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462535659,"endTime":1543462535830,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$850,000\u0027 and expected text \u0027$850,000\u0027 are matched ","startTime":1543462535830,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462535831,"endTime":1543462535831,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462535831,"endTime":1543462535831,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462535831,"endTime":1543462535860,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462535860,"endTime":1543462535860,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462535860,"endTime":1543462535861,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$170,750\u0027 and expected text \u0027$170,750\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462535861,"endTime":1543462536977,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462535861,"endTime":1543462535895,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462535895,"endTime":1543462535904,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Garrett Winters\u0027 and expected text \u0027Garrett Winters\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462535904,"endTime":1543462536159,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Garrett Winters\u0027 and expected text \u0027Garrett Winters\u0027 are matched ","startTime":1543462536158,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462536159,"endTime":1543462536335,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462536335,"endTime":1543462536335,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Accountant\u0027 and expected text \u0027Accountant\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462536336,"endTime":1543462536403,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Accountant\u0027 and expected text \u0027Accountant\u0027 are matched ","startTime":1543462536402,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462536403,"endTime":1543462536528,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462536529,"endTime":1543462536529,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Unable to verify match between actual text \u0027Tokyo\u0027 and expected text \u0027da nang\u0027 (Root cause: Actual text \u0027Tokyo\u0027 and expected text \u0027da nang\u0027 are not matched)","description":"Mapping (Compare) data on Table with Database","startTime":1543462536536,"endTime":1543462536635,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Unable to verify match between actual text \u0027Tokyo\u0027 and expected text \u0027da nang\u0027 (Root cause: Actual text \u0027Tokyo\u0027 and expected text \u0027da nang\u0027 are not matched)","startTime":1543462536635,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462536636,"endTime":1543462536670,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462536670,"endTime":1543462536670,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002763\u0027 and expected text \u002763\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462536671,"endTime":1543462536862,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002763\u0027 and expected text \u002763\u0027 are matched ","startTime":1543462536862,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462536862,"endTime":1543462536899,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462536899,"endTime":1543462536900,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272011/07/25\u0027 and expected text \u00272011/07/25\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462536900,"endTime":1543462536922,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272011/07/25\u0027 and expected text \u00272011/07/25\u0027 are matched ","startTime":1543462536922,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462536922,"endTime":1543462536953,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462536953,"endTime":1543462536954,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$170,750\u0027 and expected text \u0027$170,750\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462536954,"endTime":1543462536977,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$170,750\u0027 and expected text \u0027$170,750\u0027 are matched ","startTime":1543462536976,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462536977,"endTime":1543462536977,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462536977,"endTime":1543462536977,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462536977,"endTime":1543462537005,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462537005,"endTime":1543462537005,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462537005,"endTime":1543462537006,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$92,575\u0027 and expected text \u0027$92,575\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462537006,"endTime":1543462538157,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462537006,"endTime":1543462537035,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462537036,"endTime":1543462537042,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Gavin Joyce\u0027 and expected text \u0027Gavin Joyce\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462537042,"endTime":1543462537482,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Gavin Joyce\u0027 and expected text \u0027Gavin Joyce\u0027 are matched ","startTime":1543462537482,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462537483,"endTime":1543462537520,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462537520,"endTime":1543462537521,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Developer\u0027 and expected text \u0027Developer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462537521,"endTime":1543462537721,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Developer\u0027 and expected text \u0027Developer\u0027 are matched ","startTime":1543462537721,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462537722,"endTime":1543462537779,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462537779,"endTime":1543462537780,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462537780,"endTime":1543462537969,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","startTime":1543462537968,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462537969,"endTime":1543462538025,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462538026,"endTime":1543462538026,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002742\u0027 and expected text \u002742\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462538026,"endTime":1543462538046,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002742\u0027 and expected text \u002742\u0027 are matched ","startTime":1543462538046,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462538046,"endTime":1543462538070,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462538071,"endTime":1543462538071,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272010/12/22\u0027 and expected text \u00272010/12/22\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462538071,"endTime":1543462538093,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272010/12/22\u0027 and expected text \u00272010/12/22\u0027 are matched ","startTime":1543462538093,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462538093,"endTime":1543462538121,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462538121,"endTime":1543462538121,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$92,575\u0027 and expected text \u0027$92,575\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462538122,"endTime":1543462538157,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$92,575\u0027 and expected text \u0027$92,575\u0027 are matched ","startTime":1543462538156,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462538157,"endTime":1543462538157,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462538186,"endTime":1543462538187,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462538187,"endTime":1543462538234,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462538234,"endTime":1543462538235,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462538235,"endTime":1543462538235,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$237,500\u0027 and expected text \u0027$237,500\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462538235,"endTime":1543462539865,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462538235,"endTime":1543462538267,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462538267,"endTime":1543462538267,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Gloria Little\u0027 and expected text \u0027Gloria Little\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462538267,"endTime":1543462538731,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Gloria Little\u0027 and expected text \u0027Gloria Little\u0027 are matched ","startTime":1543462538731,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462538731,"endTime":1543462538761,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462538761,"endTime":1543462538762,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Systems Administrator\u0027 and expected text \u0027Systems Administrator\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462538762,"endTime":1543462538795,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Systems Administrator\u0027 and expected text \u0027Systems Administrator\u0027 are matched ","startTime":1543462538794,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462538795,"endTime":1543462538825,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462538825,"endTime":1543462538825,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462538825,"endTime":1543462539041,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","startTime":1543462539041,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462539042,"endTime":1543462539157,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462539157,"endTime":1543462539157,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002759\u0027 and expected text \u002759\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462539158,"endTime":1543462539308,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002759\u0027 and expected text \u002759\u0027 are matched ","startTime":1543462539308,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462539308,"endTime":1543462539341,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462539341,"endTime":1543462539342,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272009/04/10\u0027 and expected text \u00272009/04/10\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462539342,"endTime":1543462539538,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272009/04/10\u0027 and expected text \u00272009/04/10\u0027 are matched ","startTime":1543462539537,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462539538,"endTime":1543462539766,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462539766,"endTime":1543462539767,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$237,500\u0027 and expected text \u0027$237,500\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462539767,"endTime":1543462539865,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$237,500\u0027 and expected text \u0027$237,500\u0027 are matched ","startTime":1543462539864,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462539865,"endTime":1543462539865,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462539865,"endTime":1543462539867,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462539867,"endTime":1543462539902,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462539902,"endTime":1543462539903,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462539903,"endTime":1543462539903,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$313,500\u0027 and expected text \u0027$313,500\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462539904,"endTime":1543462541652,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462539904,"endTime":1543462540105,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462540105,"endTime":1543462540106,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Haley Kennedy\u0027 and expected text \u0027Haley Kennedy\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462540106,"endTime":1543462540168,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Haley Kennedy\u0027 and expected text \u0027Haley Kennedy\u0027 are matched ","startTime":1543462540168,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462540168,"endTime":1543462540362,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462540362,"endTime":1543462540363,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Senior Marketing Designer\u0027 and expected text \u0027Senior Marketing Designer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462540363,"endTime":1543462540394,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Senior Marketing Designer\u0027 and expected text \u0027Senior Marketing Designer\u0027 are matched ","startTime":1543462540394,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462540394,"endTime":1543462540423,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462540423,"endTime":1543462540424,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462540424,"endTime":1543462540504,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","startTime":1543462540504,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462540505,"endTime":1543462540671,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462540671,"endTime":1543462540672,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002743\u0027 and expected text \u002743\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462540672,"endTime":1543462541073,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002743\u0027 and expected text \u002743\u0027 are matched ","startTime":1543462541073,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462541073,"endTime":1543462541166,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462541167,"endTime":1543462541170,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272012/12/18\u0027 and expected text \u00272012/12/18\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462541170,"endTime":1543462541207,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272012/12/18\u0027 and expected text \u00272012/12/18\u0027 are matched ","startTime":1543462541198,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462541207,"endTime":1543462541364,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462541364,"endTime":1543462541365,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$313,500\u0027 and expected text \u0027$313,500\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462541365,"endTime":1543462541652,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$313,500\u0027 and expected text \u0027$313,500\u0027 are matched ","startTime":1543462541652,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462541652,"endTime":1543462541653,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462541653,"endTime":1543462541653,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462541653,"endTime":1543462541726,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462541727,"endTime":1543462541727,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462541727,"endTime":1543462541727,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$137,500\u0027 and expected text \u0027$137,500\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462541727,"endTime":1543462544136,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462541741,"endTime":1543462542047,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462542047,"endTime":1543462542048,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Herrod Chandler\u0027 and expected text \u0027Herrod Chandler\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462542048,"endTime":1543462542342,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Herrod Chandler\u0027 and expected text \u0027Herrod Chandler\u0027 are matched ","startTime":1543462542342,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462542342,"endTime":1543462542402,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462542402,"endTime":1543462542403,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Sales Assistant\u0027 and expected text \u0027Sales Assistant\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462542403,"endTime":1543462542699,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Sales Assistant\u0027 and expected text \u0027Sales Assistant\u0027 are matched ","startTime":1543462542698,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462542699,"endTime":1543462542913,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462542914,"endTime":1543462542915,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462542915,"endTime":1543462542978,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027San Francisco\u0027 and expected text \u0027San Francisco\u0027 are matched ","startTime":1543462542978,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462542978,"endTime":1543462543105,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462543105,"endTime":1543462543106,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002759\u0027 and expected text \u002759\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462543106,"endTime":1543462543439,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002759\u0027 and expected text \u002759\u0027 are matched ","startTime":1543462543439,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462543439,"endTime":1543462543608,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462543609,"endTime":1543462543609,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272012/08/06\u0027 and expected text \u00272012/08/06\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462543609,"endTime":1543462543879,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272012/08/06\u0027 and expected text \u00272012/08/06\u0027 are matched ","startTime":1543462543878,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462543879,"endTime":1543462544025,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462544026,"endTime":1543462544026,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$137,500\u0027 and expected text \u0027$137,500\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462544026,"endTime":1543462544136,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$137,500\u0027 and expected text \u0027$137,500\u0027 are matched ","startTime":1543462544136,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462544136,"endTime":1543462544138,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462544138,"endTime":1543462544139,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462544139,"endTime":1543462544378,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462544379,"endTime":1543462544379,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462544379,"endTime":1543462544379,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$90,560\u0027 and expected text \u0027$90,560\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462544380,"endTime":1543462547250,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462544380,"endTime":1543462544669,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462544669,"endTime":1543462544669,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Jena Gaines\u0027 and expected text \u0027Jena Gaines\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462544669,"endTime":1543462544760,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Jena Gaines\u0027 and expected text \u0027Jena Gaines\u0027 are matched ","startTime":1543462544760,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462544760,"endTime":1543462544991,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462544991,"endTime":1543462544991,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Office Manager\u0027 and expected text \u0027Office Manager\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462544991,"endTime":1543462545346,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Office Manager\u0027 and expected text \u0027Office Manager\u0027 are matched ","startTime":1543462545345,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462545346,"endTime":1543462546270,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462546271,"endTime":1543462546271,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462546272,"endTime":1543462546324,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","startTime":1543462546324,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462546324,"endTime":1543462546436,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462546436,"endTime":1543462546436,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002730\u0027 and expected text \u002730\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462546436,"endTime":1543462546674,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002730\u0027 and expected text \u002730\u0027 are matched ","startTime":1543462546674,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462546674,"endTime":1543462546957,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462546957,"endTime":1543462546957,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272008/12/19\u0027 and expected text \u00272008/12/19\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462546957,"endTime":1543462547004,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272008/12/19\u0027 and expected text \u00272008/12/19\u0027 are matched ","startTime":1543462547004,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462547005,"endTime":1543462547113,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462547113,"endTime":1543462547113,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$90,560\u0027 and expected text \u0027$90,560\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462547113,"endTime":1543462547250,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$90,560\u0027 and expected text \u0027$90,560\u0027 are matched ","startTime":1543462547250,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462547250,"endTime":1543462547251,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462547251,"endTime":1543462547251,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462547251,"endTime":1543462547285,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462547290,"endTime":1543462547290,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462547291,"endTime":1543462547291,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$345,000\u0027 and expected text \u0027$345,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462547291,"endTime":1543462548829,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462547291,"endTime":1543462547437,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462547437,"endTime":1543462547437,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Jenette Caldwell\u0027 and expected text \u0027Jenette Caldwell\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462547437,"endTime":1543462547498,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Jenette Caldwell\u0027 and expected text \u0027Jenette Caldwell\u0027 are matched ","startTime":1543462547498,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462547498,"endTime":1543462547529,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462547529,"endTime":1543462547542,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Development Lead\u0027 and expected text \u0027Development Lead\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462547548,"endTime":1543462547781,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Development Lead\u0027 and expected text \u0027Development Lead\u0027 are matched ","startTime":1543462547781,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462547781,"endTime":1543462547824,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462547825,"endTime":1543462547825,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462547825,"endTime":1543462548300,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","startTime":1543462548300,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462548301,"endTime":1543462548336,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462548337,"endTime":1543462548337,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002730\u0027 and expected text \u002730\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462548337,"endTime":1543462548363,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002730\u0027 and expected text \u002730\u0027 are matched ","startTime":1543462548363,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462548364,"endTime":1543462548454,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462548454,"endTime":1543462548455,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272011/09/03\u0027 and expected text \u00272011/09/03\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462548455,"endTime":1543462548585,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272011/09/03\u0027 and expected text \u00272011/09/03\u0027 are matched ","startTime":1543462548585,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462548585,"endTime":1543462548801,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462548802,"endTime":1543462548802,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$345,000\u0027 and expected text \u0027$345,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462548802,"endTime":1543462548829,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$345,000\u0027 and expected text \u0027$345,000\u0027 are matched ","startTime":1543462548828,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462548829,"endTime":1543462548829,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462548829,"endTime":1543462548829,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Try","description":"","startTime":1543462548830,"endTime":1543462567788,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - element \u003d driver.findElement(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example_paginate\u0027]/span/a[\" + i + \"]\")).click()","description":"Get Table Locator and count row and column total","startTime":1543462548830,"endTime":1543462549142,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - java.lang.Thread.sleep(2000)","description":"","startTime":1543462549142,"endTime":1543462551150,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_table \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example\u0027]/tbody/tr\"))","description":"","startTime":1543462551150,"endTime":1543462551225,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_count \u003d row_table.size()","description":"","startTime":1543462551225,"endTime":1543462551225,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of rows of page \" + i + \" are : \" + row_count)","description":"","startTime":1543462551225,"endTime":1543462551226,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([row \u003d 0, row \u003c row_count, (row++)])","description":"","startTime":1543462551226,"endTime":1543462567787,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462551226,"endTime":1543462551254,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462551255,"endTime":1543462551278,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462551285,"endTime":1543462551290,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$357,650\u0027 and expected text \u0027$357,650\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462551290,"endTime":1543462553369,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462551290,"endTime":1543462551655,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462551655,"endTime":1543462551655,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Jennifer Chang\u0027 and expected text \u0027Jennifer Chang\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462551656,"endTime":1543462551906,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Jennifer Chang\u0027 and expected text \u0027Jennifer Chang\u0027 are matched ","startTime":1543462551901,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462551906,"endTime":1543462551963,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462551963,"endTime":1543462551963,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Regional Director\u0027 and expected text \u0027Regional Director\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462551964,"endTime":1543462552207,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Regional Director\u0027 and expected text \u0027Regional Director\u0027 are matched ","startTime":1543462552207,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462552207,"endTime":1543462552241,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462552241,"endTime":1543462552242,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Singapore\u0027 and expected text \u0027Singapore\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462552242,"endTime":1543462552469,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Singapore\u0027 and expected text \u0027Singapore\u0027 are matched ","startTime":1543462552469,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462552469,"endTime":1543462552507,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462552507,"endTime":1543462552507,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002728\u0027 and expected text \u002728\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462552508,"endTime":1543462552528,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002728\u0027 and expected text \u002728\u0027 are matched ","startTime":1543462552528,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462552528,"endTime":1543462552557,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462552558,"endTime":1543462552558,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272010/11/14\u0027 and expected text \u00272010/11/14\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462552558,"endTime":1543462553063,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272010/11/14\u0027 and expected text \u00272010/11/14\u0027 are matched ","startTime":1543462553062,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462553063,"endTime":1543462553109,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462553109,"endTime":1543462553109,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$357,650\u0027 and expected text \u0027$357,650\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462553110,"endTime":1543462553369,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$357,650\u0027 and expected text \u0027$357,650\u0027 are matched ","startTime":1543462553368,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462553369,"endTime":1543462553369,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462553369,"endTime":1543462553369,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462553370,"endTime":1543462553554,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462553555,"endTime":1543462553555,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462553555,"endTime":1543462553555,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$198,500\u0027 and expected text \u0027$198,500\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462553555,"endTime":1543462555574,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462553556,"endTime":1543462553623,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462553623,"endTime":1543462553623,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Michael Silva\u0027 and expected text \u0027Michael Silva\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462553623,"endTime":1543462553894,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Michael Silva\u0027 and expected text \u0027Michael Silva\u0027 are matched ","startTime":1543462553894,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462553894,"endTime":1543462554192,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462554193,"endTime":1543462554193,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Marketing Designer\u0027 and expected text \u0027Marketing Designer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462554194,"endTime":1543462554542,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Marketing Designer\u0027 and expected text \u0027Marketing Designer\u0027 are matched ","startTime":1543462554541,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462554542,"endTime":1543462554723,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462554723,"endTime":1543462554725,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462554725,"endTime":1543462554760,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","startTime":1543462554760,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462554760,"endTime":1543462554813,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462554814,"endTime":1543462554814,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002766\u0027 and expected text \u002766\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462554814,"endTime":1543462555002,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002766\u0027 and expected text \u002766\u0027 are matched ","startTime":1543462555002,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462555002,"endTime":1543462555042,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462555042,"endTime":1543462555042,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272012/11/27\u0027 and expected text \u00272012/11/27\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462555043,"endTime":1543462555433,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272012/11/27\u0027 and expected text \u00272012/11/27\u0027 are matched ","startTime":1543462555432,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462555433,"endTime":1543462555533,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462555533,"endTime":1543462555534,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$198,500\u0027 and expected text \u0027$198,500\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462555534,"endTime":1543462555573,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$198,500\u0027 and expected text \u0027$198,500\u0027 are matched ","startTime":1543462555573,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462555574,"endTime":1543462555574,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462555574,"endTime":1543462555574,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462555575,"endTime":1543462555752,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462555752,"endTime":1543462555753,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462555753,"endTime":1543462555753,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$95,400\u0027 and expected text \u0027$95,400\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462555753,"endTime":1543462556901,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462555753,"endTime":1543462555808,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462555808,"endTime":1543462555808,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Michelle House\u0027 and expected text \u0027Michelle House\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462555808,"endTime":1543462556015,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Michelle House\u0027 and expected text \u0027Michelle House\u0027 are matched ","startTime":1543462556015,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462556015,"endTime":1543462556047,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462556047,"endTime":1543462556048,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Integration Specialist\u0027 and expected text \u0027Integration Specialist\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462556048,"endTime":1543462556073,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Integration Specialist\u0027 and expected text \u0027Integration Specialist\u0027 are matched ","startTime":1543462556073,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462556073,"endTime":1543462556112,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462556112,"endTime":1543462556112,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Sidney\u0027 and expected text \u0027Sidney\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462556112,"endTime":1543462556276,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Sidney\u0027 and expected text \u0027Sidney\u0027 are matched ","startTime":1543462556276,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462556276,"endTime":1543462556313,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462556313,"endTime":1543462556313,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002737\u0027 and expected text \u002737\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462556315,"endTime":1543462556553,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002737\u0027 and expected text \u002737\u0027 are matched ","startTime":1543462556553,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462556553,"endTime":1543462556590,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462556610,"endTime":1543462556611,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272011/06/02\u0027 and expected text \u00272011/06/02\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462556611,"endTime":1543462556821,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272011/06/02\u0027 and expected text \u00272011/06/02\u0027 are matched ","startTime":1543462556821,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462556824,"endTime":1543462556881,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462556882,"endTime":1543462556882,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$95,400\u0027 and expected text \u0027$95,400\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462556882,"endTime":1543462556901,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$95,400\u0027 and expected text \u0027$95,400\u0027 are matched ","startTime":1543462556900,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462556901,"endTime":1543462556901,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462556901,"endTime":1543462556901,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462556901,"endTime":1543462557070,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462557070,"endTime":1543462557070,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462557071,"endTime":1543462557071,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$725,000\u0027 and expected text \u0027$725,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462557071,"endTime":1543462559063,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462557071,"endTime":1543462557105,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462557105,"endTime":1543462557106,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Paul Byrd\u0027 and expected text \u0027Paul Byrd\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462557106,"endTime":1543462557792,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Paul Byrd\u0027 and expected text \u0027Paul Byrd\u0027 are matched ","startTime":1543462557791,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462557792,"endTime":1543462557847,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462557847,"endTime":1543462557847,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Chief Financial Officer (CFO)\u0027 and expected text \u0027Chief Financial Officer (CFO)\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462557848,"endTime":1543462558075,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Chief Financial Officer (CFO)\u0027 and expected text \u0027Chief Financial Officer (CFO)\u0027 are matched ","startTime":1543462558075,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462558075,"endTime":1543462558188,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462558188,"endTime":1543462558188,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462558188,"endTime":1543462558303,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","startTime":1543462558303,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462558303,"endTime":1543462558354,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462558355,"endTime":1543462558355,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002764\u0027 and expected text \u002764\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462558355,"endTime":1543462558531,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002764\u0027 and expected text \u002764\u0027 are matched ","startTime":1543462558531,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462558531,"endTime":1543462558565,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462558565,"endTime":1543462558565,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272010/06/09\u0027 and expected text \u00272010/06/09\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462558565,"endTime":1543462558586,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272010/06/09\u0027 and expected text \u00272010/06/09\u0027 are matched ","startTime":1543462558586,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462558586,"endTime":1543462558703,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462558703,"endTime":1543462558704,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$725,000\u0027 and expected text \u0027$725,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462558704,"endTime":1543462559063,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$725,000\u0027 and expected text \u0027$725,000\u0027 are matched ","startTime":1543462559063,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462559063,"endTime":1543462559063,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462559064,"endTime":1543462559064,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462559064,"endTime":1543462559100,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462559100,"endTime":1543462559100,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462559101,"endTime":1543462559103,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$342,000\u0027 and expected text \u0027$342,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462559104,"endTime":1543462560386,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462559104,"endTime":1543462559149,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462559150,"endTime":1543462559150,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Quinn Flynn\u0027 and expected text \u0027Quinn Flynn\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462559150,"endTime":1543462559334,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Quinn Flynn\u0027 and expected text \u0027Quinn Flynn\u0027 are matched ","startTime":1543462559334,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462559334,"endTime":1543462559393,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462559394,"endTime":1543462559394,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Support Lead\u0027 and expected text \u0027Support Lead\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462559395,"endTime":1543462559577,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Support Lead\u0027 and expected text \u0027Support Lead\u0027 are matched ","startTime":1543462559577,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462559577,"endTime":1543462559613,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462559613,"endTime":1543462559614,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462559614,"endTime":1543462559643,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","startTime":1543462559643,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462559644,"endTime":1543462559782,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462559782,"endTime":1543462559782,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002722\u0027 and expected text \u002722\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462559782,"endTime":1543462559843,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002722\u0027 and expected text \u002722\u0027 are matched ","startTime":1543462559843,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462559844,"endTime":1543462560028,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462560029,"endTime":1543462560029,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272013/03/03\u0027 and expected text \u00272013/03/03\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462560029,"endTime":1543462560152,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272013/03/03\u0027 and expected text \u00272013/03/03\u0027 are matched ","startTime":1543462560152,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462560152,"endTime":1543462560184,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462560184,"endTime":1543462560186,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$342,000\u0027 and expected text \u0027$342,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462560187,"endTime":1543462560385,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$342,000\u0027 and expected text \u0027$342,000\u0027 are matched ","startTime":1543462560385,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462560386,"endTime":1543462560386,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462560386,"endTime":1543462560389,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462560389,"endTime":1543462560431,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462560431,"endTime":1543462560431,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462560431,"endTime":1543462560431,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$327,900\u0027 and expected text \u0027$327,900\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462560432,"endTime":1543462561937,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462560432,"endTime":1543462560557,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462560557,"endTime":1543462560557,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Rhona Davidson\u0027 and expected text \u0027Rhona Davidson\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462560557,"endTime":1543462560886,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Rhona Davidson\u0027 and expected text \u0027Rhona Davidson\u0027 are matched ","startTime":1543462560886,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462560886,"endTime":1543462560922,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462560923,"endTime":1543462560923,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Integration Specialist\u0027 and expected text \u0027Integration Specialist\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462560923,"endTime":1543462560948,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Integration Specialist\u0027 and expected text \u0027Integration Specialist\u0027 are matched ","startTime":1543462560947,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462560948,"endTime":1543462561165,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462561165,"endTime":1543462561165,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Tokyo\u0027 and expected text \u0027Tokyo\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462561165,"endTime":1543462561470,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Tokyo\u0027 and expected text \u0027Tokyo\u0027 are matched ","startTime":1543462561470,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462561470,"endTime":1543462561508,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462561508,"endTime":1543462561509,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002755\u0027 and expected text \u002755\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462561509,"endTime":1543462561696,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002755\u0027 and expected text \u002755\u0027 are matched ","startTime":1543462561696,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462561696,"endTime":1543462561726,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462561726,"endTime":1543462561727,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272010/10/14\u0027 and expected text \u00272010/10/14\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462561727,"endTime":1543462561751,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272010/10/14\u0027 and expected text \u00272010/10/14\u0027 are matched ","startTime":1543462561751,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462561751,"endTime":1543462561855,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462561856,"endTime":1543462561856,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$327,900\u0027 and expected text \u0027$327,900\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462561856,"endTime":1543462561937,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$327,900\u0027 and expected text \u0027$327,900\u0027 are matched ","startTime":1543462561937,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462561937,"endTime":1543462561938,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462561938,"endTime":1543462561938,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462561938,"endTime":1543462561989,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462561990,"endTime":1543462561991,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462561991,"endTime":1543462561991,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$163,000\u0027 and expected text \u0027$163,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462561992,"endTime":1543462563101,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462561997,"endTime":1543462562157,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462562157,"endTime":1543462562168,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Shou Itou\u0027 and expected text \u0027Shou Itou\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462562182,"endTime":1543462562213,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Shou Itou\u0027 and expected text \u0027Shou Itou\u0027 are matched ","startTime":1543462562212,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462562213,"endTime":1543462562250,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462562250,"endTime":1543462562251,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Regional Marketing\u0027 and expected text \u0027Regional Marketing\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462562251,"endTime":1543462562540,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Regional Marketing\u0027 and expected text \u0027Regional Marketing\u0027 are matched ","startTime":1543462562540,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462562540,"endTime":1543462562574,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462562574,"endTime":1543462562574,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Tokyo\u0027 and expected text \u0027Tokyo\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462562575,"endTime":1543462562775,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Tokyo\u0027 and expected text \u0027Tokyo\u0027 are matched ","startTime":1543462562775,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462562775,"endTime":1543462562805,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462562805,"endTime":1543462562805,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002720\u0027 and expected text \u002720\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462562805,"endTime":1543462562830,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002720\u0027 and expected text \u002720\u0027 are matched ","startTime":1543462562829,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462562830,"endTime":1543462562859,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462562863,"endTime":1543462562864,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272011/08/14\u0027 and expected text \u00272011/08/14\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462562864,"endTime":1543462563048,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272011/08/14\u0027 and expected text \u00272011/08/14\u0027 are matched ","startTime":1543462563048,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462563048,"endTime":1543462563081,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462563081,"endTime":1543462563081,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$163,000\u0027 and expected text \u0027$163,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462563082,"endTime":1543462563101,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$163,000\u0027 and expected text \u0027$163,000\u0027 are matched ","startTime":1543462563101,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462563101,"endTime":1543462563101,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462563102,"endTime":1543462563102,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462563103,"endTime":1543462563194,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462563194,"endTime":1543462563194,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462563195,"endTime":1543462563196,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$103,600\u0027 and expected text \u0027$103,600\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462563196,"endTime":1543462564334,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462563196,"endTime":1543462563341,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462563341,"endTime":1543462563341,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Sonya Frost\u0027 and expected text \u0027Sonya Frost\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462563341,"endTime":1543462563370,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Sonya Frost\u0027 and expected text \u0027Sonya Frost\u0027 are matched ","startTime":1543462563369,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462563370,"endTime":1543462563565,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462563565,"endTime":1543462563566,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Software Engineer\u0027 and expected text \u0027Software Engineer\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462563566,"endTime":1543462563829,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Software Engineer\u0027 and expected text \u0027Software Engineer\u0027 are matched ","startTime":1543462563829,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462563829,"endTime":1543462563857,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462563857,"endTime":1543462563857,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462563858,"endTime":1543462563881,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","startTime":1543462563881,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462563881,"endTime":1543462563980,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462563980,"endTime":1543462563981,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002723\u0027 and expected text \u002723\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462563981,"endTime":1543462564072,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002723\u0027 and expected text \u002723\u0027 are matched ","startTime":1543462564072,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462564073,"endTime":1543462564105,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462564105,"endTime":1543462564107,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272008/12/13\u0027 and expected text \u00272008/12/13\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462564107,"endTime":1543462564137,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272008/12/13\u0027 and expected text \u00272008/12/13\u0027 are matched ","startTime":1543462564137,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462564137,"endTime":1543462564239,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462564239,"endTime":1543462564239,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$103,600\u0027 and expected text \u0027$103,600\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462564239,"endTime":1543462564334,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$103,600\u0027 and expected text \u0027$103,600\u0027 are matched ","startTime":1543462564334,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462564335,"endTime":1543462564335,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462564335,"endTime":1543462564335,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462564335,"endTime":1543462564358,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462564358,"endTime":1543462564358,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462564358,"endTime":1543462564359,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$385,750\u0027 and expected text \u0027$385,750\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462564359,"endTime":1543462566719,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462564359,"endTime":1543462564397,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462564397,"endTime":1543462564397,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Tatyana Fitzpatrick\u0027 and expected text \u0027Tatyana Fitzpatrick\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462564398,"endTime":1543462564840,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Tatyana Fitzpatrick\u0027 and expected text \u0027Tatyana Fitzpatrick\u0027 are matched ","startTime":1543462564840,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462564840,"endTime":1543462564890,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462564891,"endTime":1543462564891,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Regional Director\u0027 and expected text \u0027Regional Director\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462564891,"endTime":1543462565115,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Regional Director\u0027 and expected text \u0027Regional Director\u0027 are matched ","startTime":1543462565114,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462565115,"endTime":1543462565170,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462565170,"endTime":1543462565171,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462565171,"endTime":1543462565399,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027London\u0027 and expected text \u0027London\u0027 are matched ","startTime":1543462565399,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462565399,"endTime":1543462565550,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462565550,"endTime":1543462565551,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002719\u0027 and expected text \u002719\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462565551,"endTime":1543462565712,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002719\u0027 and expected text \u002719\u0027 are matched ","startTime":1543462565712,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462565713,"endTime":1543462565947,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462565947,"endTime":1543462565947,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272010/03/17\u0027 and expected text \u00272010/03/17\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462565947,"endTime":1543462566171,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272010/03/17\u0027 and expected text \u00272010/03/17\u0027 are matched ","startTime":1543462566171,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462566172,"endTime":1543462566205,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462566209,"endTime":1543462566210,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$385,750\u0027 and expected text \u0027$385,750\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462566213,"endTime":1543462566719,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$385,750\u0027 and expected text \u0027$385,750\u0027 are matched ","startTime":1543462566719,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462566719,"endTime":1543462566719,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462566720,"endTime":1543462566720,"childRecords":[],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462566720,"endTime":1543462566750,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462566751,"endTime":1543462566751,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462566751,"endTime":1543462566751,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$320,800\u0027 and expected text \u0027$320,800\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462566751,"endTime":1543462567785,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462566751,"endTime":1543462566782,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462566783,"endTime":1543462566783,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Tiger Nixon\u0027 and expected text \u0027Tiger Nixon\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462566783,"endTime":1543462566967,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Tiger Nixon\u0027 and expected text \u0027Tiger Nixon\u0027 are matched ","startTime":1543462566967,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462566967,"endTime":1543462566996,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462566996,"endTime":1543462566996,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027System Architect\u0027 and expected text \u0027System Architect\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462566996,"endTime":1543462567244,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027System Architect\u0027 and expected text \u0027System Architect\u0027 are matched ","startTime":1543462567244,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462567244,"endTime":1543462567288,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462567288,"endTime":1543462567288,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462567288,"endTime":1543462567307,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Edinburgh\u0027 and expected text \u0027Edinburgh\u0027 are matched ","startTime":1543462567307,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462567307,"endTime":1543462567333,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462567333,"endTime":1543462567334,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002761\u0027 and expected text \u002761\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462567334,"endTime":1543462567518,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002761\u0027 and expected text \u002761\u0027 are matched ","startTime":1543462567518,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462567518,"endTime":1543462567549,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462567549,"endTime":1543462567549,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272011/04/25\u0027 and expected text \u00272011/04/25\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462567550,"endTime":1543462567570,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272011/04/25\u0027 and expected text \u00272011/04/25\u0027 are matched ","startTime":1543462567570,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462567570,"endTime":1543462567728,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462567728,"endTime":1543462567728,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$320,800\u0027 and expected text \u0027$320,800\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462567729,"endTime":1543462567785,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$320,800\u0027 and expected text \u0027$320,800\u0027 are matched ","startTime":1543462567785,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462567786,"endTime":1543462567786,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462567786,"endTime":1543462567787,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - Try","description":"","startTime":1543462567788,"endTime":1543462571052,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - element \u003d driver.findElement(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example_paginate\u0027]/span/a[\" + i + \"]\")).click()","description":"Get Table Locator and count row and column total","startTime":1543462567788,"endTime":1543462568062,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - java.lang.Thread.sleep(2000)","description":"","startTime":1543462568066,"endTime":1543462570066,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_table \u003d driver.findElements(org.openqa.selenium.By.xpath(\".//*[@id\u003d\u0027example\u0027]/tbody/tr\"))","description":"","startTime":1543462570067,"endTime":1543462570093,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_count \u003d row_table.size()","description":"","startTime":1543462570093,"endTime":1543462570093,"childRecords":[],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of rows of page \" + i + \" are : \" + row_count)","description":"","startTime":1543462570093,"endTime":1543462570094,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([row \u003d 0, row \u003c row_count, (row++)])","description":"","startTime":1543462570094,"endTime":1543462571052,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_table \u003d row_table.get(row).findElements(org.openqa.selenium.By.tagName(\"td\"))","description":"","startTime":1543462570094,"endTime":1543462570118,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - column_count \u003d column_table.size()","description":"","startTime":1543462570118,"endTime":1543462570119,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"No of cell in rows : \" + row + \" are \" + column_count)","description":"","startTime":1543462570119,"endTime":1543462570119,"childRecords":[],"interuppted":false},{"index":4,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - For ([column \u003d 0, column \u003c column_count, (column++)])","message":"Actual text \u0027$675,000\u0027 and expected text \u0027$675,000\u0027 are matched ","description":"Fetch through each row and column to get data","startTime":1543462570119,"endTime":1543462571051,"childRecords":[{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462570119,"endTime":1543462570148,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462570148,"endTime":1543462570149,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Yuri Berry\u0027 and expected text \u0027Yuri Berry\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462570149,"endTime":1543462570174,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Yuri Berry\u0027 and expected text \u0027Yuri Berry\u0027 are matched ","startTime":1543462570174,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462570174,"endTime":1543462570206,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462570206,"endTime":1543462570206,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027Chief Marketing Officer (CMO)\u0027 and expected text \u0027Chief Marketing Officer (CMO)\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462570206,"endTime":1543462570238,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027Chief Marketing Officer (CMO)\u0027 and expected text \u0027Chief Marketing Officer (CMO)\u0027 are matched ","startTime":1543462570238,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462570238,"endTime":1543462570265,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462570265,"endTime":1543462570267,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462570267,"endTime":1543462570292,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027New York\u0027 and expected text \u0027New York\u0027 are matched ","startTime":1543462570292,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462570292,"endTime":1543462570323,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462570323,"endTime":1543462570324,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u002740\u0027 and expected text \u002740\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462570325,"endTime":1543462570514,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u002740\u0027 and expected text \u002740\u0027 are matched ","startTime":1543462570513,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462570514,"endTime":1543462570542,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462570542,"endTime":1543462570542,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u00272009/06/25\u0027 and expected text \u00272009/06/25\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462570542,"endTime":1543462570795,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u00272009/06/25\u0027 and expected text \u00272009/06/25\u0027 are matched ","startTime":1543462570795,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false},{"index":1,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - cell_text \u003d column_table.get(column).getText()","description":"","startTime":1543462570795,"endTime":1543462570912,"childRecords":[],"interuppted":false},{"index":2,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(\"Cell value of row : \" + row + \" and cell \" + column + \" is \" + cell_text)","description":"","startTime":1543462570912,"endTime":1543462570913,"childRecords":[],"interuppted":false},{"index":3,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"verifyMatch","message":"Actual text \u0027$675,000\u0027 and expected text \u0027$675,000\u0027 are matched ","description":"Mapping (Compare) data on Table with Database","startTime":1543462570913,"endTime":1543462571051,"childRecords":[{"testStatus":{"stackTrace":"","statusValue":"PASSED"},"type":"MESSAGE","name":"","message":"Actual text \u0027$675,000\u0027 and expected text \u0027$675,000\u0027 are matched ","startTime":1543462571051,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false},{"index":5,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - row_data_table \u003d row_data_table + 1","description":"","startTime":1543462571051,"endTime":1543462571051,"childRecords":[],"interuppted":false},{"index":6,"isIgnoredIfFailed":false,"type":"TEST_STEP","name":"Statement - println(row_data_table)","description":"","startTime":1543462571052,"endTime":1543462571052,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false}],"interuppted":false},{"testStatus":{"stackTrace":"","statusValue":"FAILED"},"type":"MESSAGE","name":"","message":"Test Cases/Demo/DataTable_Pagination FAILED because (of) (Stack trace: com.kms.katalon.core.exception.StepFailedException: Unable to verify match between actual text \u002761\u0027 and expected text \u002762\u0027 (Root cause: Actual text \u002761\u0027 and expected text \u002762\u0027 are not matched)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy:32)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.stepFailed(KeywordMain.groovy)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordMain.runKeyword(KeywordMain.groovy:56)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.verifyMatch(VerifyMatchKeyword.groovy:61)\r\n\tat com.kms.katalon.core.keyword.builtin.VerifyMatchKeyword.execute(VerifyMatchKeyword.groovy:46)\r\n\tat com.kms.katalon.core.keyword.internal.KeywordExecutor.executeKeywordForPlatform(KeywordExecutor.groovy:53)\r\n\tat com.kms.katalon.core.keyword.BuiltinKeywords.verifyMatch(BuiltinKeywords.groovy:55)\r\n\tat sun.reflect.GeneratedMethodAccessor3.invoke(Unknown Source)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.reflection.CachedMethod.invoke(CachedMethod.java:93)\r\n\tat groovy.lang.MetaMethod.doMethodInvoke(MetaMethod.java:325)\r\n\tat groovy.lang.MetaClassImpl.invokeStaticMethod(MetaClassImpl.java:1469)\r\n\tat org.codehaus.groovy.runtime.callsite.StaticMetaClassSite.call(StaticMetaClassSite.java:53)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:149)\r\n\tat Script1542877361903.run(Script1542877361903.groovy:56)\r\n\tat com.kms.katalon.core.main.ScriptEngine.run(ScriptEngine.java:183)\r\n\tat com.kms.katalon.core.main.ScriptEngine.runScriptAsRawText(ScriptEngine.java:108)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.runScript(TestCaseExecutor.java:294)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.doExecute(TestCaseExecutor.java:285)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.processExecutionPhase(TestCaseExecutor.java:264)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.accessMainPhase(TestCaseExecutor.java:256)\r\n\tat com.kms.katalon.core.main.TestCaseExecutor.execute(TestCaseExecutor.java:200)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestCaseMainPhase(TestSuiteExecutor.java:129)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.accessTestSuiteMainPhase(TestSuiteExecutor.java:112)\r\n\tat com.kms.katalon.core.main.TestSuiteExecutor.execute(TestSuiteExecutor.java:81)\r\n\tat com.kms.katalon.core.main.TestCaseMain.startTestSuite(TestCaseMain.java:142)\r\n\tat com.kms.katalon.core.main.TestCaseMain$startTestSuite$0.call(Unknown Source)\r\n\tat org.codehaus.groovy.runtime.callsite.CallSiteArray.defaultCall(CallSiteArray.java:48)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:113)\r\n\tat org.codehaus.groovy.runtime.callsite.AbstractCallSite.call(AbstractCallSite.java:141)\r\n\tat TempTestSuite1543462484438.run(TempTestSuite1543462484438.groovy:36)\r\n\tat groovy.lang.GroovyShell.runScriptOrMainOrTestOrRunnable(GroovyShell.java:263)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:518)\r\n\tat groovy.lang.GroovyShell.run(GroovyShell.java:507)\r\n\tat groovy.ui.GroovyMain.processOnce(GroovyMain.java:653)\r\n\tat groovy.ui.GroovyMain.run(GroovyMain.java:384)\r\n\tat groovy.ui.GroovyMain.process(GroovyMain.java:370)\r\n\tat groovy.ui.GroovyMain.processArgs(GroovyMain.java:129)\r\n\tat groovy.ui.GroovyMain.main(GroovyMain.java:109)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\r\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\r\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\r\n\tat java.lang.reflect.Method.invoke(Method.java:498)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.rootLoader(GroovyStarter.java:109)\r\n\tat org.codehaus.groovy.tools.GroovyStarter.main(GroovyStarter.java:131)\r\n)","startTime":1543462571055,"endTime":0,"childRecords":[],"interuppted":false}],"interuppted":false}],"interuppted":false}